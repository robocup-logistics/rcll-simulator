// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MachineInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LlsfMsgs {

  /// <summary>Holder for reflection information generated from MachineInfo.proto</summary>
  public static partial class MachineInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for MachineInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MachineInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFNYWNoaW5lSW5mby5wcm90bxIJbGxzZl9tc2dzGgxQb3NlMkQucHJvdG8a",
            "ElByb2R1Y3RDb2xvci5wcm90bxoKVGVhbS5wcm90bxoKWm9uZS5wcm90bxoZ",
            "TWFjaGluZUluc3RydWN0aW9ucy5wcm90bxoYTWFjaGluZURlc2NyaXB0aW9u",
            "LnByb3RvIn8KCUxpZ2h0U3BlYxIkCgVjb2xvchgBIAIoDjIVLmxsc2ZfbXNn",
            "cy5MaWdodENvbG9yEiQKBXN0YXRlGAIgAigOMhUubGxzZl9tc2dzLkxpZ2h0",
            "U3RhdGUiJgoIQ29tcFR5cGUSDAoHQ09NUF9JRBDQDxIMCghNU0dfVFlQRRAK",
            "InwKDVNoZWxmU2xvdEluZm8SDQoFc2hlbGYYASACKA0SDAoEc2xvdBgCIAIo",
            "DRIRCglpc19maWxsZWQYAyACKAgSEwoLZGVzY3JpcHRpb24YBSABKAkiJgoI",
            "Q29tcFR5cGUSDAoHQ09NUF9JRBDQDxIMCghNU0dfVFlQRRB5IqAGCgdNYWNo",
            "aW5lEgwKBG5hbWUYASACKAkSDAoEdHlwZRgCIAEoCRINCgVzdGF0ZRgDIAEo",
            "CRIjCgp0ZWFtX2NvbG9yGAogASgOMg8ubGxzZl9tc2dzLlRlYW0SJAoGbGln",
            "aHRzGAcgAygLMhQubGxzZl9tc2dzLkxpZ2h0U3BlYxIfCgRwb3NlGAggASgL",
            "MhEubGxzZl9tc2dzLlBvc2UyRBIdCgR6b25lGAsgASgOMg8ubGxzZl9tc2dz",
            "LlpvbmUSEAoIcm90YXRpb24YDCABKA0SGgoSY29ycmVjdGx5X3JlcG9ydGVk",
            "GAkgASgIEhYKC2xvYWRlZF93aXRoGA0gASgNOgEwEikKC3JpbmdfY29sb3Jz",
            "GA4gAygOMhQubGxzZl9tc2dzLlJpbmdDb2xvchI3Cg5pbnN0cnVjdGlvbl9i",
            "cxgQIAEoCzIfLmxsc2ZfbXNncy5QcmVwYXJlSW5zdHJ1Y3Rpb25CUxI3Cg5p",
            "bnN0cnVjdGlvbl9kcxgRIAEoCzIfLmxsc2ZfbXNncy5QcmVwYXJlSW5zdHJ1",
            "Y3Rpb25EUxI3Cg5pbnN0cnVjdGlvbl9zcxgUIAEoCzIfLmxsc2ZfbXNncy5Q",
            "cmVwYXJlSW5zdHJ1Y3Rpb25TUxI3Cg5pbnN0cnVjdGlvbl9ycxgSIAEoCzIf",
            "Lmxsc2ZfbXNncy5QcmVwYXJlSW5zdHJ1Y3Rpb25SUxI3Cg5pbnN0cnVjdGlv",
            "bl9jcxgTIAEoCzIfLmxsc2ZfbXNncy5QcmVwYXJlSW5zdHJ1Y3Rpb25DUxI/",
            "ChpleHBsb3JhdGlvbl9yb3RhdGlvbl9zdGF0ZRgVIAEoDjIbLmxsc2ZfbXNn",
            "cy5FeHBsb3JhdGlvblN0YXRlEjsKFmV4cGxvcmF0aW9uX3pvbmVfc3RhdGUY",
            "FiABKA4yGy5sbHNmX21zZ3MuRXhwbG9yYXRpb25TdGF0ZRIrCglzdGF0dXNf",
            "c3MYGSADKAsyGC5sbHNmX21zZ3MuU2hlbGZTbG90SW5mbyImCghDb21wVHlw",
            "ZRIMCgdDT01QX0lEENAPEgwKCE1TR19UWVBFEAwigAEKC01hY2hpbmVJbmZv",
            "EiQKCG1hY2hpbmVzGAEgAygLMhIubGxzZl9tc2dzLk1hY2hpbmUSIwoKdGVh",
            "bV9jb2xvchgCIAEoDjIPLmxsc2ZfbXNncy5UZWFtIiYKCENvbXBUeXBlEgwK",
            "B0NPTVBfSUQQ0A8SDAoITVNHX1RZUEUQDSpHChBFeHBsb3JhdGlvblN0YXRl",
            "Eg0KCU5PX1JFUE9SVBAAEhIKDkNPUlJFQ1RfUkVQT1JUEAESEAoMV1JPTkdf",
            "UkVQT1JUEAJCNAofb3JnLnJvYm9jdXBfbG9naXN0aWNzLmxsc2ZfbXNnc0IR",
            "TWFjaGluZUluZm9Qcm90b3M="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::LlsfMsgs.Pose2DReflection.Descriptor, global::LlsfMsgs.ProductColorReflection.Descriptor, global::LlsfMsgs.TeamReflection.Descriptor, global::LlsfMsgs.ZoneReflection.Descriptor, global::LlsfMsgs.MachineInstructionsReflection.Descriptor, global::LlsfMsgs.MachineDescriptionReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LlsfMsgs.ExplorationState), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.LightSpec), global::LlsfMsgs.LightSpec.Parser, new[]{ "Color", "State" }, null, new[]{ typeof(global::LlsfMsgs.LightSpec.Types.CompType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.ShelfSlotInfo), global::LlsfMsgs.ShelfSlotInfo.Parser, new[]{ "Shelf", "Slot", "IsFilled", "Description" }, null, new[]{ typeof(global::LlsfMsgs.ShelfSlotInfo.Types.CompType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.Machine), global::LlsfMsgs.Machine.Parser, new[]{ "Name", "Type", "State", "TeamColor", "Lights", "Pose", "Zone", "Rotation", "CorrectlyReported", "LoadedWith", "RingColors", "InstructionBs", "InstructionDs", "InstructionSs", "InstructionRs", "InstructionCs", "ExplorationRotationState", "ExplorationZoneState", "StatusSs" }, null, new[]{ typeof(global::LlsfMsgs.Machine.Types.CompType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.MachineInfo), global::LlsfMsgs.MachineInfo.Parser, new[]{ "Machines", "TeamColor" }, null, new[]{ typeof(global::LlsfMsgs.MachineInfo.Types.CompType) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ExplorationState {
    [pbr::OriginalName("NO_REPORT")] NoReport = 0,
    [pbr::OriginalName("CORRECT_REPORT")] CorrectReport = 1,
    [pbr::OriginalName("WRONG_REPORT")] WrongReport = 2,
  }

  #endregion

  #region Messages
  public sealed partial class LightSpec : pb::IMessage<LightSpec>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LightSpec> _parser = new pb::MessageParser<LightSpec>(() => new LightSpec());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LightSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.MachineInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LightSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LightSpec(LightSpec other) : this() {
      _hasBits0 = other._hasBits0;
      color_ = other.color_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LightSpec Clone() {
      return new LightSpec(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private readonly static global::LlsfMsgs.LightColor ColorDefaultValue = global::LlsfMsgs.LightColor.Red;

    private global::LlsfMsgs.LightColor color_;
    /// <summary>
    /// Color and state of described light
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.LightColor Color {
      get { if ((_hasBits0 & 1) != 0) { return color_; } else { return ColorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        color_ = value;
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasColor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearColor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private readonly static global::LlsfMsgs.LightState StateDefaultValue = global::LlsfMsgs.LightState.Off;

    private global::LlsfMsgs.LightState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.LightState State {
      get { if ((_hasBits0 & 2) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearState() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LightSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LightSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasColor) hash ^= Color.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasColor) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Color);
      }
      if (HasState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasColor) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Color);
      }
      if (HasState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LightSpec other) {
      if (other == null) {
        return;
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.HasState) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Color = (global::LlsfMsgs.LightColor) input.ReadEnum();
            break;
          }
          case 16: {
            State = (global::LlsfMsgs.LightState) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Color = (global::LlsfMsgs.LightColor) input.ReadEnum();
            break;
          }
          case 16: {
            State = (global::LlsfMsgs.LightState) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LightSpec message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 10,
      }

    }
    #endregion

  }

  /// <summary>
  /// Shelf Information
  /// </summary>
  public sealed partial class ShelfSlotInfo : pb::IMessage<ShelfSlotInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShelfSlotInfo> _parser = new pb::MessageParser<ShelfSlotInfo>(() => new ShelfSlotInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ShelfSlotInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.MachineInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShelfSlotInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShelfSlotInfo(ShelfSlotInfo other) : this() {
      _hasBits0 = other._hasBits0;
      shelf_ = other.shelf_;
      slot_ = other.slot_;
      isFilled_ = other.isFilled_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShelfSlotInfo Clone() {
      return new ShelfSlotInfo(this);
    }

    /// <summary>Field number for the "shelf" field.</summary>
    public const int ShelfFieldNumber = 1;
    private readonly static uint ShelfDefaultValue = 0;

    private uint shelf_;
    /// <summary>
    /// shelf position (see MachineInstructons.proto)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Shelf {
      get { if ((_hasBits0 & 1) != 0) { return shelf_; } else { return ShelfDefaultValue; } }
      set {
        _hasBits0 |= 1;
        shelf_ = value;
      }
    }
    /// <summary>Gets whether the "shelf" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShelf {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "shelf" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShelf() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 2;
    private readonly static uint SlotDefaultValue = 0;

    private uint slot_;
    /// <summary>
    /// slot position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Slot {
      get { if ((_hasBits0 & 2) != 0) { return slot_; } else { return SlotDefaultValue; } }
      set {
        _hasBits0 |= 2;
        slot_ = value;
      }
    }
    /// <summary>Gets whether the "slot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSlot {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "slot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSlot() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_filled" field.</summary>
    public const int IsFilledFieldNumber = 3;
    private readonly static bool IsFilledDefaultValue = false;

    private bool isFilled_;
    /// <summary>
    /// fill status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFilled {
      get { if ((_hasBits0 & 4) != 0) { return isFilled_; } else { return IsFilledDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isFilled_ = value;
      }
    }
    /// <summary>Gets whether the "is_filled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsFilled {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_filled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsFilled() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// additional information of the workpiece in that position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ShelfSlotInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ShelfSlotInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shelf != other.Shelf) return false;
      if (Slot != other.Slot) return false;
      if (IsFilled != other.IsFilled) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasShelf) hash ^= Shelf.GetHashCode();
      if (HasSlot) hash ^= Slot.GetHashCode();
      if (HasIsFilled) hash ^= IsFilled.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasShelf) {
        output.WriteRawTag(8);
        output.WriteUInt32(Shelf);
      }
      if (HasSlot) {
        output.WriteRawTag(16);
        output.WriteUInt32(Slot);
      }
      if (HasIsFilled) {
        output.WriteRawTag(24);
        output.WriteBool(IsFilled);
      }
      if (HasDescription) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasShelf) {
        output.WriteRawTag(8);
        output.WriteUInt32(Shelf);
      }
      if (HasSlot) {
        output.WriteRawTag(16);
        output.WriteUInt32(Slot);
      }
      if (HasIsFilled) {
        output.WriteRawTag(24);
        output.WriteBool(IsFilled);
      }
      if (HasDescription) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasShelf) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Shelf);
      }
      if (HasSlot) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Slot);
      }
      if (HasIsFilled) {
        size += 1 + 1;
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ShelfSlotInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasShelf) {
        Shelf = other.Shelf;
      }
      if (other.HasSlot) {
        Slot = other.Slot;
      }
      if (other.HasIsFilled) {
        IsFilled = other.IsFilled;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Shelf = input.ReadUInt32();
            break;
          }
          case 16: {
            Slot = input.ReadUInt32();
            break;
          }
          case 24: {
            IsFilled = input.ReadBool();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Shelf = input.ReadUInt32();
            break;
          }
          case 16: {
            Slot = input.ReadUInt32();
            break;
          }
          case 24: {
            IsFilled = input.ReadBool();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ShelfSlotInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 121,
      }

    }
    #endregion

  }

  public sealed partial class Machine : pb::IMessage<Machine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Machine> _parser = new pb::MessageParser<Machine>(() => new Machine());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Machine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.MachineInfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Machine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Machine(Machine other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      type_ = other.type_;
      state_ = other.state_;
      teamColor_ = other.teamColor_;
      lights_ = other.lights_.Clone();
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      zone_ = other.zone_;
      rotation_ = other.rotation_;
      correctlyReported_ = other.correctlyReported_;
      loadedWith_ = other.loadedWith_;
      ringColors_ = other.ringColors_.Clone();
      instructionBs_ = other.instructionBs_ != null ? other.instructionBs_.Clone() : null;
      instructionDs_ = other.instructionDs_ != null ? other.instructionDs_.Clone() : null;
      instructionSs_ = other.instructionSs_ != null ? other.instructionSs_.Clone() : null;
      instructionRs_ = other.instructionRs_ != null ? other.instructionRs_.Clone() : null;
      instructionCs_ = other.instructionCs_ != null ? other.instructionCs_.Clone() : null;
      explorationRotationState_ = other.explorationRotationState_;
      explorationZoneState_ = other.explorationZoneState_;
      statusSs_ = other.statusSs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Machine Clone() {
      return new Machine(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Machine name, type, and team
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private readonly static string StateDefaultValue = "";

    private string state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string State {
      get { return state_ ?? StateDefaultValue; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasState {
      get { return state_ != null; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearState() {
      state_ = null;
    }

    /// <summary>Field number for the "team_color" field.</summary>
    public const int TeamColorFieldNumber = 10;
    private readonly static global::LlsfMsgs.Team TeamColorDefaultValue = global::LlsfMsgs.Team.Cyan;

    private global::LlsfMsgs.Team teamColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.Team TeamColor {
      get { if ((_hasBits0 & 2) != 0) { return teamColor_; } else { return TeamColorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        teamColor_ = value;
      }
    }
    /// <summary>Gets whether the "team_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTeamColor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "team_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTeamColor() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "lights" field.</summary>
    public const int LightsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::LlsfMsgs.LightSpec> _repeated_lights_codec
        = pb::FieldCodec.ForMessage(58, global::LlsfMsgs.LightSpec.Parser);
    private readonly pbc::RepeatedField<global::LlsfMsgs.LightSpec> lights_ = new pbc::RepeatedField<global::LlsfMsgs.LightSpec>();
    /// <summary>
    /// Current state of the lights
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LlsfMsgs.LightSpec> Lights {
      get { return lights_; }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 8;
    private global::LlsfMsgs.Pose2D pose_;
    /// <summary>
    /// Optional pose if known to refbox
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.Pose2D Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 11;
    private readonly static global::LlsfMsgs.Zone ZoneDefaultValue = global::LlsfMsgs.Zone.CZ18;

    private global::LlsfMsgs.Zone zone_;
    /// <summary>
    /// Which zone the machine is in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.Zone Zone {
      get { if ((_hasBits0 & 4) != 0) { return zone_; } else { return ZoneDefaultValue; } }
      set {
        _hasBits0 |= 4;
        zone_ = value;
      }
    }
    /// <summary>Gets whether the "zone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasZone {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "zone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearZone() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 12;
    private readonly static uint RotationDefaultValue = 0;

    private uint rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Rotation {
      get { if ((_hasBits0 & 8) != 0) { return rotation_; } else { return RotationDefaultValue; } }
      set {
        _hasBits0 |= 8;
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the "rotation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRotation {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "rotation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRotation() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "correctly_reported" field.</summary>
    public const int CorrectlyReportedFieldNumber = 9;
    private readonly static bool CorrectlyReportedDefaultValue = false;

    private bool correctlyReported_;
    /// <summary>
    /// Only set during exploration phase
    /// Correctly reported? (zone and type correct)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CorrectlyReported {
      get { if ((_hasBits0 & 1) != 0) { return correctlyReported_; } else { return CorrectlyReportedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        correctlyReported_ = value;
      }
    }
    /// <summary>Gets whether the "correctly_reported" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCorrectlyReported {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "correctly_reported" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCorrectlyReported() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "loaded_with" field.</summary>
    public const int LoadedWithFieldNumber = 13;
    private readonly static uint LoadedWithDefaultValue = 0;

    private uint loadedWith_;
    /// <summary>
    /// Number of bases loaded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LoadedWith {
      get { if ((_hasBits0 & 16) != 0) { return loadedWith_; } else { return LoadedWithDefaultValue; } }
      set {
        _hasBits0 |= 16;
        loadedWith_ = value;
      }
    }
    /// <summary>Gets whether the "loaded_with" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLoadedWith {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "loaded_with" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLoadedWith() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "ring_colors" field.</summary>
    public const int RingColorsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::LlsfMsgs.RingColor> _repeated_ringColors_codec
        = pb::FieldCodec.ForEnum(112, x => (int) x, x => (global::LlsfMsgs.RingColor) x);
    private readonly pbc::RepeatedField<global::LlsfMsgs.RingColor> ringColors_ = new pbc::RepeatedField<global::LlsfMsgs.RingColor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LlsfMsgs.RingColor> RingColors {
      get { return ringColors_; }
    }

    /// <summary>Field number for the "instruction_bs" field.</summary>
    public const int InstructionBsFieldNumber = 16;
    private global::LlsfMsgs.PrepareInstructionBS instructionBs_;
    /// <summary>
    /// Instruction information (only clients)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.PrepareInstructionBS InstructionBs {
      get { return instructionBs_; }
      set {
        instructionBs_ = value;
      }
    }

    /// <summary>Field number for the "instruction_ds" field.</summary>
    public const int InstructionDsFieldNumber = 17;
    private global::LlsfMsgs.PrepareInstructionDS instructionDs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.PrepareInstructionDS InstructionDs {
      get { return instructionDs_; }
      set {
        instructionDs_ = value;
      }
    }

    /// <summary>Field number for the "instruction_ss" field.</summary>
    public const int InstructionSsFieldNumber = 20;
    private global::LlsfMsgs.PrepareInstructionSS instructionSs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.PrepareInstructionSS InstructionSs {
      get { return instructionSs_; }
      set {
        instructionSs_ = value;
      }
    }

    /// <summary>Field number for the "instruction_rs" field.</summary>
    public const int InstructionRsFieldNumber = 18;
    private global::LlsfMsgs.PrepareInstructionRS instructionRs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.PrepareInstructionRS InstructionRs {
      get { return instructionRs_; }
      set {
        instructionRs_ = value;
      }
    }

    /// <summary>Field number for the "instruction_cs" field.</summary>
    public const int InstructionCsFieldNumber = 19;
    private global::LlsfMsgs.PrepareInstructionCS instructionCs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.PrepareInstructionCS InstructionCs {
      get { return instructionCs_; }
      set {
        instructionCs_ = value;
      }
    }

    /// <summary>Field number for the "exploration_rotation_state" field.</summary>
    public const int ExplorationRotationStateFieldNumber = 21;
    private readonly static global::LlsfMsgs.ExplorationState ExplorationRotationStateDefaultValue = global::LlsfMsgs.ExplorationState.NoReport;

    private global::LlsfMsgs.ExplorationState explorationRotationState_;
    /// <summary>
    /// more fine-grained exploration (only clients)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.ExplorationState ExplorationRotationState {
      get { if ((_hasBits0 & 32) != 0) { return explorationRotationState_; } else { return ExplorationRotationStateDefaultValue; } }
      set {
        _hasBits0 |= 32;
        explorationRotationState_ = value;
      }
    }
    /// <summary>Gets whether the "exploration_rotation_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExplorationRotationState {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "exploration_rotation_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExplorationRotationState() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "exploration_zone_state" field.</summary>
    public const int ExplorationZoneStateFieldNumber = 22;
    private readonly static global::LlsfMsgs.ExplorationState ExplorationZoneStateDefaultValue = global::LlsfMsgs.ExplorationState.NoReport;

    private global::LlsfMsgs.ExplorationState explorationZoneState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.ExplorationState ExplorationZoneState {
      get { if ((_hasBits0 & 64) != 0) { return explorationZoneState_; } else { return ExplorationZoneStateDefaultValue; } }
      set {
        _hasBits0 |= 64;
        explorationZoneState_ = value;
      }
    }
    /// <summary>Gets whether the "exploration_zone_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExplorationZoneState {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "exploration_zone_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExplorationZoneState() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "status_ss" field.</summary>
    public const int StatusSsFieldNumber = 25;
    private static readonly pb::FieldCodec<global::LlsfMsgs.ShelfSlotInfo> _repeated_statusSs_codec
        = pb::FieldCodec.ForMessage(202, global::LlsfMsgs.ShelfSlotInfo.Parser);
    private readonly pbc::RepeatedField<global::LlsfMsgs.ShelfSlotInfo> statusSs_ = new pbc::RepeatedField<global::LlsfMsgs.ShelfSlotInfo>();
    /// <summary>
    /// Status of the storage station shelf-slots
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LlsfMsgs.ShelfSlotInfo> StatusSs {
      get { return statusSs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Machine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Machine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (State != other.State) return false;
      if (TeamColor != other.TeamColor) return false;
      if(!lights_.Equals(other.lights_)) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if (Zone != other.Zone) return false;
      if (Rotation != other.Rotation) return false;
      if (CorrectlyReported != other.CorrectlyReported) return false;
      if (LoadedWith != other.LoadedWith) return false;
      if(!ringColors_.Equals(other.ringColors_)) return false;
      if (!object.Equals(InstructionBs, other.InstructionBs)) return false;
      if (!object.Equals(InstructionDs, other.InstructionDs)) return false;
      if (!object.Equals(InstructionSs, other.InstructionSs)) return false;
      if (!object.Equals(InstructionRs, other.InstructionRs)) return false;
      if (!object.Equals(InstructionCs, other.InstructionCs)) return false;
      if (ExplorationRotationState != other.ExplorationRotationState) return false;
      if (ExplorationZoneState != other.ExplorationZoneState) return false;
      if(!statusSs_.Equals(other.statusSs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasTeamColor) hash ^= TeamColor.GetHashCode();
      hash ^= lights_.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (HasZone) hash ^= Zone.GetHashCode();
      if (HasRotation) hash ^= Rotation.GetHashCode();
      if (HasCorrectlyReported) hash ^= CorrectlyReported.GetHashCode();
      if (HasLoadedWith) hash ^= LoadedWith.GetHashCode();
      hash ^= ringColors_.GetHashCode();
      if (instructionBs_ != null) hash ^= InstructionBs.GetHashCode();
      if (instructionDs_ != null) hash ^= InstructionDs.GetHashCode();
      if (instructionSs_ != null) hash ^= InstructionSs.GetHashCode();
      if (instructionRs_ != null) hash ^= InstructionRs.GetHashCode();
      if (instructionCs_ != null) hash ^= InstructionCs.GetHashCode();
      if (HasExplorationRotationState) hash ^= ExplorationRotationState.GetHashCode();
      if (HasExplorationZoneState) hash ^= ExplorationZoneState.GetHashCode();
      hash ^= statusSs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HasState) {
        output.WriteRawTag(26);
        output.WriteString(State);
      }
      lights_.WriteTo(output, _repeated_lights_codec);
      if (pose_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Pose);
      }
      if (HasCorrectlyReported) {
        output.WriteRawTag(72);
        output.WriteBool(CorrectlyReported);
      }
      if (HasTeamColor) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TeamColor);
      }
      if (HasZone) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Zone);
      }
      if (HasRotation) {
        output.WriteRawTag(96);
        output.WriteUInt32(Rotation);
      }
      if (HasLoadedWith) {
        output.WriteRawTag(104);
        output.WriteUInt32(LoadedWith);
      }
      ringColors_.WriteTo(output, _repeated_ringColors_codec);
      if (instructionBs_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(InstructionBs);
      }
      if (instructionDs_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(InstructionDs);
      }
      if (instructionRs_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(InstructionRs);
      }
      if (instructionCs_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(InstructionCs);
      }
      if (instructionSs_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(InstructionSs);
      }
      if (HasExplorationRotationState) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) ExplorationRotationState);
      }
      if (HasExplorationZoneState) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) ExplorationZoneState);
      }
      statusSs_.WriteTo(output, _repeated_statusSs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HasState) {
        output.WriteRawTag(26);
        output.WriteString(State);
      }
      lights_.WriteTo(ref output, _repeated_lights_codec);
      if (pose_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Pose);
      }
      if (HasCorrectlyReported) {
        output.WriteRawTag(72);
        output.WriteBool(CorrectlyReported);
      }
      if (HasTeamColor) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TeamColor);
      }
      if (HasZone) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Zone);
      }
      if (HasRotation) {
        output.WriteRawTag(96);
        output.WriteUInt32(Rotation);
      }
      if (HasLoadedWith) {
        output.WriteRawTag(104);
        output.WriteUInt32(LoadedWith);
      }
      ringColors_.WriteTo(ref output, _repeated_ringColors_codec);
      if (instructionBs_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(InstructionBs);
      }
      if (instructionDs_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(InstructionDs);
      }
      if (instructionRs_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(InstructionRs);
      }
      if (instructionCs_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(InstructionCs);
      }
      if (instructionSs_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(InstructionSs);
      }
      if (HasExplorationRotationState) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) ExplorationRotationState);
      }
      if (HasExplorationZoneState) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) ExplorationZoneState);
      }
      statusSs_.WriteTo(ref output, _repeated_statusSs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (HasTeamColor) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TeamColor);
      }
      size += lights_.CalculateSize(_repeated_lights_codec);
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (HasZone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Zone);
      }
      if (HasRotation) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rotation);
      }
      if (HasCorrectlyReported) {
        size += 1 + 1;
      }
      if (HasLoadedWith) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoadedWith);
      }
      size += ringColors_.CalculateSize(_repeated_ringColors_codec);
      if (instructionBs_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InstructionBs);
      }
      if (instructionDs_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InstructionDs);
      }
      if (instructionSs_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InstructionSs);
      }
      if (instructionRs_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InstructionRs);
      }
      if (instructionCs_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InstructionCs);
      }
      if (HasExplorationRotationState) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExplorationRotationState);
      }
      if (HasExplorationZoneState) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExplorationZoneState);
      }
      size += statusSs_.CalculateSize(_repeated_statusSs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Machine other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasTeamColor) {
        TeamColor = other.TeamColor;
      }
      lights_.Add(other.lights_);
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::LlsfMsgs.Pose2D();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.HasZone) {
        Zone = other.Zone;
      }
      if (other.HasRotation) {
        Rotation = other.Rotation;
      }
      if (other.HasCorrectlyReported) {
        CorrectlyReported = other.CorrectlyReported;
      }
      if (other.HasLoadedWith) {
        LoadedWith = other.LoadedWith;
      }
      ringColors_.Add(other.ringColors_);
      if (other.instructionBs_ != null) {
        if (instructionBs_ == null) {
          InstructionBs = new global::LlsfMsgs.PrepareInstructionBS();
        }
        InstructionBs.MergeFrom(other.InstructionBs);
      }
      if (other.instructionDs_ != null) {
        if (instructionDs_ == null) {
          InstructionDs = new global::LlsfMsgs.PrepareInstructionDS();
        }
        InstructionDs.MergeFrom(other.InstructionDs);
      }
      if (other.instructionSs_ != null) {
        if (instructionSs_ == null) {
          InstructionSs = new global::LlsfMsgs.PrepareInstructionSS();
        }
        InstructionSs.MergeFrom(other.InstructionSs);
      }
      if (other.instructionRs_ != null) {
        if (instructionRs_ == null) {
          InstructionRs = new global::LlsfMsgs.PrepareInstructionRS();
        }
        InstructionRs.MergeFrom(other.InstructionRs);
      }
      if (other.instructionCs_ != null) {
        if (instructionCs_ == null) {
          InstructionCs = new global::LlsfMsgs.PrepareInstructionCS();
        }
        InstructionCs.MergeFrom(other.InstructionCs);
      }
      if (other.HasExplorationRotationState) {
        ExplorationRotationState = other.ExplorationRotationState;
      }
      if (other.HasExplorationZoneState) {
        ExplorationZoneState = other.ExplorationZoneState;
      }
      statusSs_.Add(other.statusSs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            State = input.ReadString();
            break;
          }
          case 58: {
            lights_.AddEntriesFrom(input, _repeated_lights_codec);
            break;
          }
          case 66: {
            if (pose_ == null) {
              Pose = new global::LlsfMsgs.Pose2D();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 72: {
            CorrectlyReported = input.ReadBool();
            break;
          }
          case 80: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
          case 88: {
            Zone = (global::LlsfMsgs.Zone) input.ReadEnum();
            break;
          }
          case 96: {
            Rotation = input.ReadUInt32();
            break;
          }
          case 104: {
            LoadedWith = input.ReadUInt32();
            break;
          }
          case 114:
          case 112: {
            ringColors_.AddEntriesFrom(input, _repeated_ringColors_codec);
            break;
          }
          case 130: {
            if (instructionBs_ == null) {
              InstructionBs = new global::LlsfMsgs.PrepareInstructionBS();
            }
            input.ReadMessage(InstructionBs);
            break;
          }
          case 138: {
            if (instructionDs_ == null) {
              InstructionDs = new global::LlsfMsgs.PrepareInstructionDS();
            }
            input.ReadMessage(InstructionDs);
            break;
          }
          case 146: {
            if (instructionRs_ == null) {
              InstructionRs = new global::LlsfMsgs.PrepareInstructionRS();
            }
            input.ReadMessage(InstructionRs);
            break;
          }
          case 154: {
            if (instructionCs_ == null) {
              InstructionCs = new global::LlsfMsgs.PrepareInstructionCS();
            }
            input.ReadMessage(InstructionCs);
            break;
          }
          case 162: {
            if (instructionSs_ == null) {
              InstructionSs = new global::LlsfMsgs.PrepareInstructionSS();
            }
            input.ReadMessage(InstructionSs);
            break;
          }
          case 168: {
            ExplorationRotationState = (global::LlsfMsgs.ExplorationState) input.ReadEnum();
            break;
          }
          case 176: {
            ExplorationZoneState = (global::LlsfMsgs.ExplorationState) input.ReadEnum();
            break;
          }
          case 202: {
            statusSs_.AddEntriesFrom(input, _repeated_statusSs_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            State = input.ReadString();
            break;
          }
          case 58: {
            lights_.AddEntriesFrom(ref input, _repeated_lights_codec);
            break;
          }
          case 66: {
            if (pose_ == null) {
              Pose = new global::LlsfMsgs.Pose2D();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 72: {
            CorrectlyReported = input.ReadBool();
            break;
          }
          case 80: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
          case 88: {
            Zone = (global::LlsfMsgs.Zone) input.ReadEnum();
            break;
          }
          case 96: {
            Rotation = input.ReadUInt32();
            break;
          }
          case 104: {
            LoadedWith = input.ReadUInt32();
            break;
          }
          case 114:
          case 112: {
            ringColors_.AddEntriesFrom(ref input, _repeated_ringColors_codec);
            break;
          }
          case 130: {
            if (instructionBs_ == null) {
              InstructionBs = new global::LlsfMsgs.PrepareInstructionBS();
            }
            input.ReadMessage(InstructionBs);
            break;
          }
          case 138: {
            if (instructionDs_ == null) {
              InstructionDs = new global::LlsfMsgs.PrepareInstructionDS();
            }
            input.ReadMessage(InstructionDs);
            break;
          }
          case 146: {
            if (instructionRs_ == null) {
              InstructionRs = new global::LlsfMsgs.PrepareInstructionRS();
            }
            input.ReadMessage(InstructionRs);
            break;
          }
          case 154: {
            if (instructionCs_ == null) {
              InstructionCs = new global::LlsfMsgs.PrepareInstructionCS();
            }
            input.ReadMessage(InstructionCs);
            break;
          }
          case 162: {
            if (instructionSs_ == null) {
              InstructionSs = new global::LlsfMsgs.PrepareInstructionSS();
            }
            input.ReadMessage(InstructionSs);
            break;
          }
          case 168: {
            ExplorationRotationState = (global::LlsfMsgs.ExplorationState) input.ReadEnum();
            break;
          }
          case 176: {
            ExplorationZoneState = (global::LlsfMsgs.ExplorationState) input.ReadEnum();
            break;
          }
          case 202: {
            statusSs_.AddEntriesFrom(ref input, _repeated_statusSs_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Machine message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 12,
      }

    }
    #endregion

  }

  public sealed partial class MachineInfo : pb::IMessage<MachineInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MachineInfo> _parser = new pb::MessageParser<MachineInfo>(() => new MachineInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MachineInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.MachineInfoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MachineInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MachineInfo(MachineInfo other) : this() {
      _hasBits0 = other._hasBits0;
      machines_ = other.machines_.Clone();
      teamColor_ = other.teamColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MachineInfo Clone() {
      return new MachineInfo(this);
    }

    /// <summary>Field number for the "machines" field.</summary>
    public const int MachinesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LlsfMsgs.Machine> _repeated_machines_codec
        = pb::FieldCodec.ForMessage(10, global::LlsfMsgs.Machine.Parser);
    private readonly pbc::RepeatedField<global::LlsfMsgs.Machine> machines_ = new pbc::RepeatedField<global::LlsfMsgs.Machine>();
    /// <summary>
    /// List of machines states
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::LlsfMsgs.Machine> Machines {
      get { return machines_; }
    }

    /// <summary>Field number for the "team_color" field.</summary>
    public const int TeamColorFieldNumber = 2;
    private readonly static global::LlsfMsgs.Team TeamColorDefaultValue = global::LlsfMsgs.Team.Cyan;

    private global::LlsfMsgs.Team teamColor_;
    /// <summary>
    /// Team color (only broadcast)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::LlsfMsgs.Team TeamColor {
      get { if ((_hasBits0 & 1) != 0) { return teamColor_; } else { return TeamColorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        teamColor_ = value;
      }
    }
    /// <summary>Gets whether the "team_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTeamColor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "team_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTeamColor() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MachineInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MachineInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!machines_.Equals(other.machines_)) return false;
      if (TeamColor != other.TeamColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= machines_.GetHashCode();
      if (HasTeamColor) hash ^= TeamColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      machines_.WriteTo(output, _repeated_machines_codec);
      if (HasTeamColor) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TeamColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      machines_.WriteTo(ref output, _repeated_machines_codec);
      if (HasTeamColor) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TeamColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += machines_.CalculateSize(_repeated_machines_codec);
      if (HasTeamColor) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TeamColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MachineInfo other) {
      if (other == null) {
        return;
      }
      machines_.Add(other.machines_);
      if (other.HasTeamColor) {
        TeamColor = other.TeamColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            machines_.AddEntriesFrom(input, _repeated_machines_codec);
            break;
          }
          case 16: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            machines_.AddEntriesFrom(ref input, _repeated_machines_codec);
            break;
          }
          case 16: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MachineInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 13,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
