// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LightSignalDetection.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GazsimMsgs {

  /// <summary>Holder for reflection information generated from LightSignalDetection.proto</summary>
  public static partial class LightSignalDetectionReflection {

    #region Descriptor
    /// <summary>File descriptor for LightSignalDetection.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LightSignalDetectionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpMaWdodFNpZ25hbERldGVjdGlvbi5wcm90bxILZ2F6c2ltX21zZ3MiiAMK",
            "FExpZ2h0U2lnbmFsRGV0ZWN0aW9uEg8KB3Zpc2libGUYASACKAgSOwoGbGln",
            "aHRzGAIgAygLMisuZ2F6c2ltX21zZ3MuTGlnaHRTaWduYWxEZXRlY3Rpb24u",
            "TGlnaHRTcGVjEhoKEnZpc2liaWxpdHlfaGlzdG9yeRgDIAIoBRqtAQoJTGln",
            "aHRTcGVjEjsKBWNvbG9yGAEgAigOMiwuZ2F6c2ltX21zZ3MuTGlnaHRTaWdu",
            "YWxEZXRlY3Rpb24uTGlnaHRDb2xvchI7CgVzdGF0ZRgCIAIoDjIsLmdhenNp",
            "bV9tc2dzLkxpZ2h0U2lnbmFsRGV0ZWN0aW9uLkxpZ2h0U3RhdGUiJgoIQ29t",
            "cFR5cGUSDAoHQ09NUF9JRBDQDxIMCghNU0dfVFlQRRAKIiwKCkxpZ2h0Q29s",
            "b3ISBwoDUkVEEAASCgoGWUVMTE9XEAESCQoFR1JFRU4QAiIoCgpMaWdodFN0",
            "YXRlEgcKA09GRhAAEgYKAk9OEAESCQoFQkxJTksQAg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GazsimMsgs.LightSignalDetection), global::GazsimMsgs.LightSignalDetection.Parser, new[]{ "Visible", "Lights", "VisibilityHistory" }, null, new[]{ typeof(global::GazsimMsgs.LightSignalDetection.Types.LightColor), typeof(global::GazsimMsgs.LightSignalDetection.Types.LightState) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GazsimMsgs.LightSignalDetection.Types.LightSpec), global::GazsimMsgs.LightSignalDetection.Types.LightSpec.Parser, new[]{ "Color", "State" }, null, new[]{ typeof(global::GazsimMsgs.LightSignalDetection.Types.LightSpec.Types.CompType) }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LightSignalDetection : pb::IMessage<LightSignalDetection> {
    private static readonly pb::MessageParser<LightSignalDetection> _parser = new pb::MessageParser<LightSignalDetection>(() => new LightSignalDetection());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightSignalDetection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GazsimMsgs.LightSignalDetectionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightSignalDetection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightSignalDetection(LightSignalDetection other) : this() {
      _hasBits0 = other._hasBits0;
      visible_ = other.visible_;
      lights_ = other.lights_.Clone();
      visibilityHistory_ = other.visibilityHistory_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightSignalDetection Clone() {
      return new LightSignalDetection(this);
    }

    /// <summary>Field number for the "visible" field.</summary>
    public const int VisibleFieldNumber = 1;
    private readonly static bool VisibleDefaultValue = false;

    private bool visible_;
    /// <summary>
    /// Is the light currently visible?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visible {
      get { if ((_hasBits0 & 1) != 0) { return visible_; } else { return VisibleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        visible_ = value;
      }
    }
    /// <summary>Gets whether the "visible" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisible {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "visible" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisible() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "lights" field.</summary>
    public const int LightsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GazsimMsgs.LightSignalDetection.Types.LightSpec> _repeated_lights_codec
        = pb::FieldCodec.ForMessage(18, global::GazsimMsgs.LightSignalDetection.Types.LightSpec.Parser);
    private readonly pbc::RepeatedField<global::GazsimMsgs.LightSignalDetection.Types.LightSpec> lights_ = new pbc::RepeatedField<global::GazsimMsgs.LightSignalDetection.Types.LightSpec>();
    /// <summary>
    /// Current state of the lights (empty when not visible)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GazsimMsgs.LightSignalDetection.Types.LightSpec> Lights {
      get { return lights_; }
    }

    /// <summary>Field number for the "visibility_history" field.</summary>
    public const int VisibilityHistoryFieldNumber = 3;
    private readonly static int VisibilityHistoryDefaultValue = 0;

    private int visibilityHistory_;
    /// <summary>
    /// How long has the light been visible and steady?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VisibilityHistory {
      get { if ((_hasBits0 & 2) != 0) { return visibilityHistory_; } else { return VisibilityHistoryDefaultValue; } }
      set {
        _hasBits0 |= 2;
        visibilityHistory_ = value;
      }
    }
    /// <summary>Gets whether the "visibility_history" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVisibilityHistory {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "visibility_history" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVisibilityHistory() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightSignalDetection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightSignalDetection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Visible != other.Visible) return false;
      if(!lights_.Equals(other.lights_)) return false;
      if (VisibilityHistory != other.VisibilityHistory) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVisible) hash ^= Visible.GetHashCode();
      hash ^= lights_.GetHashCode();
      if (HasVisibilityHistory) hash ^= VisibilityHistory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasVisible) {
        output.WriteRawTag(8);
        output.WriteBool(Visible);
      }
      lights_.WriteTo(output, _repeated_lights_codec);
      if (HasVisibilityHistory) {
        output.WriteRawTag(24);
        output.WriteInt32(VisibilityHistory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVisible) {
        size += 1 + 1;
      }
      size += lights_.CalculateSize(_repeated_lights_codec);
      if (HasVisibilityHistory) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VisibilityHistory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightSignalDetection other) {
      if (other == null) {
        return;
      }
      if (other.HasVisible) {
        Visible = other.Visible;
      }
      lights_.Add(other.lights_);
      if (other.HasVisibilityHistory) {
        VisibilityHistory = other.VisibilityHistory;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Visible = input.ReadBool();
            break;
          }
          case 18: {
            lights_.AddEntriesFrom(input, _repeated_lights_codec);
            break;
          }
          case 24: {
            VisibilityHistory = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LightSignalDetection message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LightColor {
        [pbr::OriginalName("RED")] Red = 0,
        [pbr::OriginalName("YELLOW")] Yellow = 1,
        [pbr::OriginalName("GREEN")] Green = 2,
      }

      public enum LightState {
        [pbr::OriginalName("OFF")] Off = 0,
        [pbr::OriginalName("ON")] On = 1,
        [pbr::OriginalName("BLINK")] Blink = 2,
      }

      public sealed partial class LightSpec : pb::IMessage<LightSpec> {
        private static readonly pb::MessageParser<LightSpec> _parser = new pb::MessageParser<LightSpec>(() => new LightSpec());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LightSpec> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GazsimMsgs.LightSignalDetection.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LightSpec() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LightSpec(LightSpec other) : this() {
          _hasBits0 = other._hasBits0;
          color_ = other.color_;
          state_ = other.state_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LightSpec Clone() {
          return new LightSpec(this);
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 1;
        private readonly static global::GazsimMsgs.LightSignalDetection.Types.LightColor ColorDefaultValue = global::GazsimMsgs.LightSignalDetection.Types.LightColor.Red;

        private global::GazsimMsgs.LightSignalDetection.Types.LightColor color_;
        /// <summary>
        /// Color and state of described light
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GazsimMsgs.LightSignalDetection.Types.LightColor Color {
          get { if ((_hasBits0 & 1) != 0) { return color_; } else { return ColorDefaultValue; } }
          set {
            _hasBits0 |= 1;
            color_ = value;
          }
        }
        /// <summary>Gets whether the "color" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasColor {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "color" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearColor() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private readonly static global::GazsimMsgs.LightSignalDetection.Types.LightState StateDefaultValue = global::GazsimMsgs.LightSignalDetection.Types.LightState.Off;

        private global::GazsimMsgs.LightSignalDetection.Types.LightState state_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GazsimMsgs.LightSignalDetection.Types.LightState State {
          get { if ((_hasBits0 & 2) != 0) { return state_; } else { return StateDefaultValue; } }
          set {
            _hasBits0 |= 2;
            state_ = value;
          }
        }
        /// <summary>Gets whether the "state" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasState {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "state" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearState() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LightSpec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LightSpec other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Color != other.Color) return false;
          if (State != other.State) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasColor) hash ^= Color.GetHashCode();
          if (HasState) hash ^= State.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasColor) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Color);
          }
          if (HasState) {
            output.WriteRawTag(16);
            output.WriteEnum((int) State);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasColor) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
          }
          if (HasState) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LightSpec other) {
          if (other == null) {
            return;
          }
          if (other.HasColor) {
            Color = other.Color;
          }
          if (other.HasState) {
            State = other.State;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Color = (global::GazsimMsgs.LightSignalDetection.Types.LightColor) input.ReadEnum();
                break;
              }
              case 16: {
                State = (global::GazsimMsgs.LightSignalDetection.Types.LightState) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LightSpec message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum CompType {
            [pbr::OriginalName("COMP_ID")] CompId = 2000,
            [pbr::OriginalName("MSG_TYPE")] MsgType = 10,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
