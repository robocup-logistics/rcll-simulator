// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ReportAllMachines.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LlsfMsgs {

  /// <summary>Holder for reflection information generated from ReportAllMachines.proto</summary>
  public static partial class ReportAllMachinesReflection {

    #region Descriptor
    /// <summary>File descriptor for ReportAllMachines.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReportAllMachinesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdSZXBvcnRBbGxNYWNoaW5lcy5wcm90bxIJbGxzZl9tc2dzGhhSb2JvdE1h",
            "Y2hpbmVSZXBvcnQucHJvdG8igwEKEVJlcG9ydEFsbE1hY2hpbmVzEjQKCG1h",
            "Y2hpbmVzGAIgAygLMiIubGxzZl9tc2dzLlJvYm90TWFjaGluZVJlcG9ydEVu",
            "dHJ5Eg8KB3JvYm90SUQYAyACKA0iJwoIQ29tcFR5cGUSDAoHQ09NUF9JRBC0",
            "EBINCghNU0dfVFlQRRDJAUI6Ch9vcmcucm9ib2N1cF9sb2dpc3RpY3MubGxz",
            "Zl9tc2dzQhdSZXBvcnRBbGxNYWNoaW5lc1Byb3Rvcw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::LlsfMsgs.RobotMachineReportReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.ReportAllMachines), global::LlsfMsgs.ReportAllMachines.Parser, new[]{ "Machines", "RobotID" }, null, new[]{ typeof(global::LlsfMsgs.ReportAllMachines.Types.CompType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReportAllMachines : pb::IMessage<ReportAllMachines> {
    private static readonly pb::MessageParser<ReportAllMachines> _parser = new pb::MessageParser<ReportAllMachines>(() => new ReportAllMachines());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportAllMachines> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.ReportAllMachinesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportAllMachines() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportAllMachines(ReportAllMachines other) : this() {
      _hasBits0 = other._hasBits0;
      machines_ = other.machines_.Clone();
      robotID_ = other.robotID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportAllMachines Clone() {
      return new ReportAllMachines(this);
    }

    /// <summary>Field number for the "machines" field.</summary>
    public const int MachinesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LlsfMsgs.RobotMachineReportEntry> _repeated_machines_codec
        = pb::FieldCodec.ForMessage(18, global::LlsfMsgs.RobotMachineReportEntry.Parser);
    private readonly pbc::RepeatedField<global::LlsfMsgs.RobotMachineReportEntry> machines_ = new pbc::RepeatedField<global::LlsfMsgs.RobotMachineReportEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LlsfMsgs.RobotMachineReportEntry> Machines {
      get { return machines_; }
    }

    /// <summary>Field number for the "robotID" field.</summary>
    public const int RobotIDFieldNumber = 3;
    private readonly static uint RobotIDDefaultValue = 0;

    private uint robotID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RobotID {
      get { if ((_hasBits0 & 1) != 0) { return robotID_; } else { return RobotIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        robotID_ = value;
      }
    }
    /// <summary>Gets whether the "robotID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRobotID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "robotID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRobotID() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportAllMachines);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportAllMachines other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!machines_.Equals(other.machines_)) return false;
      if (RobotID != other.RobotID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= machines_.GetHashCode();
      if (HasRobotID) hash ^= RobotID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      machines_.WriteTo(output, _repeated_machines_codec);
      if (HasRobotID) {
        output.WriteRawTag(24);
        output.WriteUInt32(RobotID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += machines_.CalculateSize(_repeated_machines_codec);
      if (HasRobotID) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RobotID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportAllMachines other) {
      if (other == null) {
        return;
      }
      machines_.Add(other.machines_);
      if (other.HasRobotID) {
        RobotID = other.RobotID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            machines_.AddEntriesFrom(input, _repeated_machines_codec);
            break;
          }
          case 24: {
            RobotID = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReportAllMachines message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2100,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 201,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
