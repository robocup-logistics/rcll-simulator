// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SimTime.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GazsimMsgs {

  /// <summary>Holder for reflection information generated from SimTime.proto</summary>
  public static partial class SimTimeReflection {

    #region Descriptor
    /// <summary>File descriptor for SimTime.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimTimeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TaW1UaW1lLnByb3RvEgtnYXpzaW1fbXNncyKJAQoHU2ltVGltZRIUCgxz",
            "aW1fdGltZV9zZWMYASACKAMSFQoNc2ltX3RpbWVfbnNlYxgCIAIoAxIYChBy",
            "ZWFsX3RpbWVfZmFjdG9yGAMgAigCEg4KBnBhdXNlZBgEIAIoCCInCghDb21w",
            "VHlwZRIMCgdDT01QX0lEENAPEg0KCE1TR19UWVBFEI0D"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GazsimMsgs.SimTime), global::GazsimMsgs.SimTime.Parser, new[]{ "SimTimeSec", "SimTimeNsec", "RealTimeFactor", "Paused" }, null, new[]{ typeof(global::GazsimMsgs.SimTime.Types.CompType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SimTime : pb::IMessage<SimTime> {
    private static readonly pb::MessageParser<SimTime> _parser = new pb::MessageParser<SimTime>(() => new SimTime());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GazsimMsgs.SimTimeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimTime(SimTime other) : this() {
      _hasBits0 = other._hasBits0;
      simTimeSec_ = other.simTimeSec_;
      simTimeNsec_ = other.simTimeNsec_;
      realTimeFactor_ = other.realTimeFactor_;
      paused_ = other.paused_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimTime Clone() {
      return new SimTime(this);
    }

    /// <summary>Field number for the "sim_time_sec" field.</summary>
    public const int SimTimeSecFieldNumber = 1;
    private readonly static long SimTimeSecDefaultValue = 0L;

    private long simTimeSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SimTimeSec {
      get { if ((_hasBits0 & 1) != 0) { return simTimeSec_; } else { return SimTimeSecDefaultValue; } }
      set {
        _hasBits0 |= 1;
        simTimeSec_ = value;
      }
    }
    /// <summary>Gets whether the "sim_time_sec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSimTimeSec {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sim_time_sec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSimTimeSec() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sim_time_nsec" field.</summary>
    public const int SimTimeNsecFieldNumber = 2;
    private readonly static long SimTimeNsecDefaultValue = 0L;

    private long simTimeNsec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SimTimeNsec {
      get { if ((_hasBits0 & 2) != 0) { return simTimeNsec_; } else { return SimTimeNsecDefaultValue; } }
      set {
        _hasBits0 |= 2;
        simTimeNsec_ = value;
      }
    }
    /// <summary>Gets whether the "sim_time_nsec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSimTimeNsec {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sim_time_nsec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSimTimeNsec() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "real_time_factor" field.</summary>
    public const int RealTimeFactorFieldNumber = 3;
    private readonly static float RealTimeFactorDefaultValue = 0F;

    private float realTimeFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealTimeFactor {
      get { if ((_hasBits0 & 4) != 0) { return realTimeFactor_; } else { return RealTimeFactorDefaultValue; } }
      set {
        _hasBits0 |= 4;
        realTimeFactor_ = value;
      }
    }
    /// <summary>Gets whether the "real_time_factor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRealTimeFactor {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "real_time_factor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRealTimeFactor() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "paused" field.</summary>
    public const int PausedFieldNumber = 4;
    private readonly static bool PausedDefaultValue = false;

    private bool paused_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Paused {
      get { if ((_hasBits0 & 8) != 0) { return paused_; } else { return PausedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        paused_ = value;
      }
    }
    /// <summary>Gets whether the "paused" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPaused {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "paused" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPaused() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SimTimeSec != other.SimTimeSec) return false;
      if (SimTimeNsec != other.SimTimeNsec) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealTimeFactor, other.RealTimeFactor)) return false;
      if (Paused != other.Paused) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSimTimeSec) hash ^= SimTimeSec.GetHashCode();
      if (HasSimTimeNsec) hash ^= SimTimeNsec.GetHashCode();
      if (HasRealTimeFactor) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealTimeFactor);
      if (HasPaused) hash ^= Paused.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSimTimeSec) {
        output.WriteRawTag(8);
        output.WriteInt64(SimTimeSec);
      }
      if (HasSimTimeNsec) {
        output.WriteRawTag(16);
        output.WriteInt64(SimTimeNsec);
      }
      if (HasRealTimeFactor) {
        output.WriteRawTag(29);
        output.WriteFloat(RealTimeFactor);
      }
      if (HasPaused) {
        output.WriteRawTag(32);
        output.WriteBool(Paused);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSimTimeSec) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SimTimeSec);
      }
      if (HasSimTimeNsec) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SimTimeNsec);
      }
      if (HasRealTimeFactor) {
        size += 1 + 4;
      }
      if (HasPaused) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimTime other) {
      if (other == null) {
        return;
      }
      if (other.HasSimTimeSec) {
        SimTimeSec = other.SimTimeSec;
      }
      if (other.HasSimTimeNsec) {
        SimTimeNsec = other.SimTimeNsec;
      }
      if (other.HasRealTimeFactor) {
        RealTimeFactor = other.RealTimeFactor;
      }
      if (other.HasPaused) {
        Paused = other.Paused;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SimTimeSec = input.ReadInt64();
            break;
          }
          case 16: {
            SimTimeNsec = input.ReadInt64();
            break;
          }
          case 29: {
            RealTimeFactor = input.ReadFloat();
            break;
          }
          case 32: {
            Paused = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SimTime message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 397,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
