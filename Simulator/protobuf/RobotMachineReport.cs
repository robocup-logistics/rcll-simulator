// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RobotMachineReport.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LlsfMsgs {

  /// <summary>Holder for reflection information generated from RobotMachineReport.proto</summary>
  public static partial class RobotMachineReportReflection {

    #region Descriptor
    /// <summary>File descriptor for RobotMachineReport.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RobotMachineReportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhSb2JvdE1hY2hpbmVSZXBvcnQucHJvdG8SCWxsc2ZfbXNncxoKVGVhbS5w",
            "cm90bxoKWm9uZS5wcm90byKjAQoXUm9ib3RNYWNoaW5lUmVwb3J0RW50cnkS",
            "DAoEbmFtZRgBIAIoCRIdCgR6b25lGAMgASgOMg8ubGxzZl9tc2dzLlpvbmUS",
            "EAoIcm90YXRpb24YBCABKA0SDAoEc2lkZRgFIAEoCRISCgpmcm9tX2xpZGFy",
            "GAYgASgIIicKCENvbXBUeXBlEgwKB0NPTVBfSUQQ4xASDQoITVNHX1RZUEUQ",
            "pAgimAEKElJvYm90TWFjaGluZVJlcG9ydBIjCgp0ZWFtX2NvbG9yGAIgAigO",
            "Mg8ubGxzZl9tc2dzLlRlYW0SNAoIbWFjaGluZXMYASADKAsyIi5sbHNmX21z",
            "Z3MuUm9ib3RNYWNoaW5lUmVwb3J0RW50cnkiJwoIQ29tcFR5cGUSDAoHQ09N",
            "UF9JRBDkEBINCghNU0dfVFlQRRClCEI7Ch9vcmcucm9ib2N1cF9sb2dpc3Rp",
            "Y3MubGxzZl9tc2dzQhhSb2JvdE1hY2hpbmVSZXBvcnRQcm90b3M="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::LlsfMsgs.TeamReflection.Descriptor, global::LlsfMsgs.ZoneReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.RobotMachineReportEntry), global::LlsfMsgs.RobotMachineReportEntry.Parser, new[]{ "Name", "Zone", "Rotation", "Side", "FromLidar" }, null, new[]{ typeof(global::LlsfMsgs.RobotMachineReportEntry.Types.CompType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.RobotMachineReport), global::LlsfMsgs.RobotMachineReport.Parser, new[]{ "TeamColor", "Machines" }, null, new[]{ typeof(global::LlsfMsgs.RobotMachineReport.Types.CompType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RobotMachineReportEntry : pb::IMessage<RobotMachineReportEntry> {
    private static readonly pb::MessageParser<RobotMachineReportEntry> _parser = new pb::MessageParser<RobotMachineReportEntry>(() => new RobotMachineReportEntry());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotMachineReportEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.RobotMachineReportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMachineReportEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMachineReportEntry(RobotMachineReportEntry other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      zone_ = other.zone_;
      rotation_ = other.rotation_;
      side_ = other.side_;
      fromLidar_ = other.fromLidar_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMachineReportEntry Clone() {
      return new RobotMachineReportEntry(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Machine name and recognized type
    /// and zone the machine is in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 3;
    private readonly static global::LlsfMsgs.Zone ZoneDefaultValue = global::LlsfMsgs.Zone.CZ18;

    private global::LlsfMsgs.Zone zone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Zone Zone {
      get { if ((_hasBits0 & 1) != 0) { return zone_; } else { return ZoneDefaultValue; } }
      set {
        _hasBits0 |= 1;
        zone_ = value;
      }
    }
    /// <summary>Gets whether the "zone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZone {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "zone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZone() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private readonly static uint RotationDefaultValue = 0;

    private uint rotation_;
    /// <summary>
    /// [0-360] in deg
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rotation {
      get { if ((_hasBits0 & 2) != 0) { return rotation_; } else { return RotationDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the "rotation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRotation {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "rotation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRotation() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 5;
    private readonly static string SideDefaultValue = "";

    private string side_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Side {
      get { return side_ ?? SideDefaultValue; }
      set {
        side_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "side" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSide {
      get { return side_ != null; }
    }
    /// <summary>Clears the value of the "side" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSide() {
      side_ = null;
    }

    /// <summary>Field number for the "from_lidar" field.</summary>
    public const int FromLidarFieldNumber = 6;
    private readonly static bool FromLidarDefaultValue = false;

    private bool fromLidar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FromLidar {
      get { if ((_hasBits0 & 4) != 0) { return fromLidar_; } else { return FromLidarDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fromLidar_ = value;
      }
    }
    /// <summary>Gets whether the "from_lidar" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromLidar {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "from_lidar" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromLidar() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotMachineReportEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotMachineReportEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Zone != other.Zone) return false;
      if (Rotation != other.Rotation) return false;
      if (Side != other.Side) return false;
      if (FromLidar != other.FromLidar) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasZone) hash ^= Zone.GetHashCode();
      if (HasRotation) hash ^= Rotation.GetHashCode();
      if (HasSide) hash ^= Side.GetHashCode();
      if (HasFromLidar) hash ^= FromLidar.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasZone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Zone);
      }
      if (HasRotation) {
        output.WriteRawTag(32);
        output.WriteUInt32(Rotation);
      }
      if (HasSide) {
        output.WriteRawTag(42);
        output.WriteString(Side);
      }
      if (HasFromLidar) {
        output.WriteRawTag(48);
        output.WriteBool(FromLidar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasZone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Zone);
      }
      if (HasRotation) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rotation);
      }
      if (HasSide) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Side);
      }
      if (HasFromLidar) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotMachineReportEntry other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasZone) {
        Zone = other.Zone;
      }
      if (other.HasRotation) {
        Rotation = other.Rotation;
      }
      if (other.HasSide) {
        Side = other.Side;
      }
      if (other.HasFromLidar) {
        FromLidar = other.FromLidar;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Zone = (global::LlsfMsgs.Zone) input.ReadEnum();
            break;
          }
          case 32: {
            Rotation = input.ReadUInt32();
            break;
          }
          case 42: {
            Side = input.ReadString();
            break;
          }
          case 48: {
            FromLidar = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RobotMachineReportEntry message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2147,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 1060,
      }

    }
    #endregion

  }

  /// <summary>
  /// Robots send this to announce recognized
  /// machines to the refbox.
  /// </summary>
  public sealed partial class RobotMachineReport : pb::IMessage<RobotMachineReport> {
    private static readonly pb::MessageParser<RobotMachineReport> _parser = new pb::MessageParser<RobotMachineReport>(() => new RobotMachineReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotMachineReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.RobotMachineReportReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMachineReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMachineReport(RobotMachineReport other) : this() {
      _hasBits0 = other._hasBits0;
      teamColor_ = other.teamColor_;
      machines_ = other.machines_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotMachineReport Clone() {
      return new RobotMachineReport(this);
    }

    /// <summary>Field number for the "team_color" field.</summary>
    public const int TeamColorFieldNumber = 2;
    private readonly static global::LlsfMsgs.Team TeamColorDefaultValue = global::LlsfMsgs.Team.Cyan;

    private global::LlsfMsgs.Team teamColor_;
    /// <summary>
    /// Team for which the report is sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Team TeamColor {
      get { if ((_hasBits0 & 1) != 0) { return teamColor_; } else { return TeamColorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        teamColor_ = value;
      }
    }
    /// <summary>Gets whether the "team_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamColor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "team_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamColor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "machines" field.</summary>
    public const int MachinesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LlsfMsgs.RobotMachineReportEntry> _repeated_machines_codec
        = pb::FieldCodec.ForMessage(10, global::LlsfMsgs.RobotMachineReportEntry.Parser);
    private readonly pbc::RepeatedField<global::LlsfMsgs.RobotMachineReportEntry> machines_ = new pbc::RepeatedField<global::LlsfMsgs.RobotMachineReportEntry>();
    /// <summary>
    /// All machines already already recognized
    /// or a subset thereof
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LlsfMsgs.RobotMachineReportEntry> Machines {
      get { return machines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotMachineReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotMachineReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamColor != other.TeamColor) return false;
      if(!machines_.Equals(other.machines_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTeamColor) hash ^= TeamColor.GetHashCode();
      hash ^= machines_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      machines_.WriteTo(output, _repeated_machines_codec);
      if (HasTeamColor) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TeamColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTeamColor) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TeamColor);
      }
      size += machines_.CalculateSize(_repeated_machines_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotMachineReport other) {
      if (other == null) {
        return;
      }
      if (other.HasTeamColor) {
        TeamColor = other.TeamColor;
      }
      machines_.Add(other.machines_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            machines_.AddEntriesFrom(input, _repeated_machines_codec);
            break;
          }
          case 16: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RobotMachineReport message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2148,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 1061,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
