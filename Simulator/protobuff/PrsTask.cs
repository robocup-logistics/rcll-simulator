// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PrsTask.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LlsfMsgs {

  /// <summary>Holder for reflection information generated from PrsTask.proto</summary>
  public static partial class PrsTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for PrsTask.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PrsTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1QcnNUYXNrLnByb3RvEglsbHNmX21zZ3MaClRlYW0ucHJvdG8itQUKB1By",
            "c1Rhc2sSIgoJdGVhbUNvbG9yGAEgAigOMg8ubGxzZl9tc2dzLlRlYW0SDgoG",
            "dGFza0lkGAIgAigNEg8KB3JvYm90SWQYAyACKA0SOwoPZXhlY3V0aW9uUmVz",
            "dWx0GAQgASgOMiIubGxzZl9tc2dzLlByc1Rhc2suRXhlY3V0aW9uUmVzdWx0",
            "EhMKC2hvbGRQcm9kdWN0GAUgASgIEj8KFXJlcG9ydEFsbE1hY2hpbmVzVGFz",
            "axgGIAEoCzIgLmxsc2ZfbXNncy5SZXBvcnRBbGxNYWNoaW5lc1Rhc2sSTQoc",
            "ZXhwbG9yZU1hY2hpbmVBdFdheXBvaW50VGFzaxgHIAEoCzInLmxsc2ZfbXNn",
            "cy5FeHBsb3JlTWFjaGluZUF0V2F5cG9pbnRUYXNrEjUKEGdldFdvcmtQaWVj",
            "ZVRhc2sYCCABKAsyGy5sbHNmX21zZ3MuR2V0V29ya1BpZWNlVGFzaxI9ChRk",
            "ZWxpdmVyV29ya1BpZWNlVGFzaxgLIAEoCzIfLmxsc2ZfbXNncy5EZWxpdmVy",
            "V29ya1BpZWNlVGFzaxJBChZzZW5kUHJlcGFyZU1hY2hpbmVUYXNrGAwgASgL",
            "MiEubGxzZl9tc2dzLlNlbmRQcmVwYXJlTWFjaGluZVRhc2sSEQoJc3RvcFJv",
            "Ym90GA0gASgIEhIKCmNhbmNlbFRhc2sYDiABKAgSOQoSbW92ZVRvV2F5UG9p",
            "bnRUYXNrGA8gASgLMh0ubGxzZl9tc2dzLk1vdmVUb1dheVBvaW50VGFzayIn",
            "CghDb21wVHlwZRIMCgdDT01QX0lEEI4nEg0KCE1TR19UWVBFEL0FIj8KD0V4",
            "ZWN1dGlvblJlc3VsdBILCgdTVUNDRVNTEAESCAoERkFJTBACEgsKB0FCT1JU",
            "RUQQAxIICgRCVVNZEAQiNAoWU2VuZFByZXBhcmVNYWNoaW5lVGFzaxIaChJt",
            "YWNoaW5lX2NvbmZpZ3VyZWQYASACKAgiTQocRXhwbG9yZU1hY2hpbmVBdFdh",
            "eXBvaW50VGFzaxIPCgdtYWNoaW5lGAEgAigJEgwKBHNpZGUYAiACKAkSDgoG",
            "em9uZUlkGAMgAigJIicKFVJlcG9ydEFsbE1hY2hpbmVzVGFzaxIOCgZyZXBv",
            "cnQYASACKAgiWQoQR2V0V29ya1BpZWNlVGFzaxIZChFwcm92aWRpbmdfc3Rh",
            "dGlvbhgBIAIoCRIWCg5wcm92aWRpbmdfdHlwZRgCIAIoCRISCgpzaGVsZnNs",
            "aWRlGAMgASgJIl0KFERlbGl2ZXJXb3JrUGllY2VUYXNrEhkKEWRlbGl2ZXJl",
            "ZF9zdGF0aW9uGAEgAigJEhYKDmRlbGl2ZXJlZF90eXBlGAIgAigJEhIKCnNo",
            "ZWxmc2xpZGUYAyABKAkiJgoSTW92ZVRvV2F5UG9pbnRUYXNrEhAKCHdheXBv",
            "aW50GAEgAigJQjAKH29yZy5yb2JvY3VwX2xvZ2lzdGljcy5sbHNmX21zZ3NC",
            "DVByc1Rhc2tQcm90b3M="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::LlsfMsgs.TeamReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.PrsTask), global::LlsfMsgs.PrsTask.Parser, new[]{ "TeamColor", "TaskId", "RobotId", "ExecutionResult", "HoldProduct", "ReportAllMachinesTask", "ExploreMachineAtWaypointTask", "GetWorkPieceTask", "DeliverWorkPieceTask", "SendPrepareMachineTask", "StopRobot", "CancelTask", "MoveToWayPointTask" }, null, new[]{ typeof(global::LlsfMsgs.PrsTask.Types.CompType), typeof(global::LlsfMsgs.PrsTask.Types.ExecutionResult) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.SendPrepareMachineTask), global::LlsfMsgs.SendPrepareMachineTask.Parser, new[]{ "MachineConfigured" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.ExploreMachineAtWaypointTask), global::LlsfMsgs.ExploreMachineAtWaypointTask.Parser, new[]{ "Machine", "Side", "ZoneId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.ReportAllMachinesTask), global::LlsfMsgs.ReportAllMachinesTask.Parser, new[]{ "Report" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.GetWorkPieceTask), global::LlsfMsgs.GetWorkPieceTask.Parser, new[]{ "ProvidingStation", "ProvidingType", "Shelfslide" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.DeliverWorkPieceTask), global::LlsfMsgs.DeliverWorkPieceTask.Parser, new[]{ "DeliveredStation", "DeliveredType", "Shelfslide" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.MoveToWayPointTask), global::LlsfMsgs.MoveToWayPointTask.Parser, new[]{ "Waypoint" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PrsTask : pb::IMessage<PrsTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PrsTask> _parser = new pb::MessageParser<PrsTask>(() => new PrsTask());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrsTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.PrsTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrsTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrsTask(PrsTask other) : this() {
      _hasBits0 = other._hasBits0;
      teamColor_ = other.teamColor_;
      taskId_ = other.taskId_;
      robotId_ = other.robotId_;
      executionResult_ = other.executionResult_;
      holdProduct_ = other.holdProduct_;
      reportAllMachinesTask_ = other.reportAllMachinesTask_ != null ? other.reportAllMachinesTask_.Clone() : null;
      exploreMachineAtWaypointTask_ = other.exploreMachineAtWaypointTask_ != null ? other.exploreMachineAtWaypointTask_.Clone() : null;
      getWorkPieceTask_ = other.getWorkPieceTask_ != null ? other.getWorkPieceTask_.Clone() : null;
      deliverWorkPieceTask_ = other.deliverWorkPieceTask_ != null ? other.deliverWorkPieceTask_.Clone() : null;
      sendPrepareMachineTask_ = other.sendPrepareMachineTask_ != null ? other.sendPrepareMachineTask_.Clone() : null;
      stopRobot_ = other.stopRobot_;
      cancelTask_ = other.cancelTask_;
      moveToWayPointTask_ = other.moveToWayPointTask_ != null ? other.moveToWayPointTask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrsTask Clone() {
      return new PrsTask(this);
    }

    /// <summary>Field number for the "teamColor" field.</summary>
    public const int TeamColorFieldNumber = 1;
    private readonly static global::LlsfMsgs.Team TeamColorDefaultValue = global::LlsfMsgs.Team.Cyan;

    private global::LlsfMsgs.Team teamColor_;
    /// <summary>
    /// Color of the team
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Team TeamColor {
      get { if ((_hasBits0 & 1) != 0) { return teamColor_; } else { return TeamColorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        teamColor_ = value;
      }
    }
    /// <summary>Gets whether the "teamColor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamColor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "teamColor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamColor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private readonly static uint TaskIdDefaultValue = 0;

    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { if ((_hasBits0 & 2) != 0) { return taskId_; } else { return TaskIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        taskId_ = value;
      }
    }
    /// <summary>Gets whether the "taskId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaskId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "taskId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaskId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "robotId" field.</summary>
    public const int RobotIdFieldNumber = 3;
    private readonly static uint RobotIdDefaultValue = 0;

    private uint robotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RobotId {
      get { if ((_hasBits0 & 4) != 0) { return robotId_; } else { return RobotIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        robotId_ = value;
      }
    }
    /// <summary>Gets whether the "robotId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRobotId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "robotId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRobotId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "executionResult" field.</summary>
    public const int ExecutionResultFieldNumber = 4;
    private readonly static global::LlsfMsgs.PrsTask.Types.ExecutionResult ExecutionResultDefaultValue = global::LlsfMsgs.PrsTask.Types.ExecutionResult.Success;

    private global::LlsfMsgs.PrsTask.Types.ExecutionResult executionResult_;
    /// <summary>
    /// result of the execution from the robot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.PrsTask.Types.ExecutionResult ExecutionResult {
      get { if ((_hasBits0 & 8) != 0) { return executionResult_; } else { return ExecutionResultDefaultValue; } }
      set {
        _hasBits0 |= 8;
        executionResult_ = value;
      }
    }
    /// <summary>Gets whether the "executionResult" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExecutionResult {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "executionResult" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExecutionResult() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "holdProduct" field.</summary>
    public const int HoldProductFieldNumber = 5;
    private readonly static bool HoldProductDefaultValue = false;

    private bool holdProduct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HoldProduct {
      get { if ((_hasBits0 & 16) != 0) { return holdProduct_; } else { return HoldProductDefaultValue; } }
      set {
        _hasBits0 |= 16;
        holdProduct_ = value;
      }
    }
    /// <summary>Gets whether the "holdProduct" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHoldProduct {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "holdProduct" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHoldProduct() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "reportAllMachinesTask" field.</summary>
    public const int ReportAllMachinesTaskFieldNumber = 6;
    private global::LlsfMsgs.ReportAllMachinesTask reportAllMachinesTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.ReportAllMachinesTask ReportAllMachinesTask {
      get { return reportAllMachinesTask_; }
      set {
        reportAllMachinesTask_ = value;
      }
    }

    /// <summary>Field number for the "exploreMachineAtWaypointTask" field.</summary>
    public const int ExploreMachineAtWaypointTaskFieldNumber = 7;
    private global::LlsfMsgs.ExploreMachineAtWaypointTask exploreMachineAtWaypointTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.ExploreMachineAtWaypointTask ExploreMachineAtWaypointTask {
      get { return exploreMachineAtWaypointTask_; }
      set {
        exploreMachineAtWaypointTask_ = value;
      }
    }

    /// <summary>Field number for the "getWorkPieceTask" field.</summary>
    public const int GetWorkPieceTaskFieldNumber = 8;
    private global::LlsfMsgs.GetWorkPieceTask getWorkPieceTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.GetWorkPieceTask GetWorkPieceTask {
      get { return getWorkPieceTask_; }
      set {
        getWorkPieceTask_ = value;
      }
    }

    /// <summary>Field number for the "deliverWorkPieceTask" field.</summary>
    public const int DeliverWorkPieceTaskFieldNumber = 11;
    private global::LlsfMsgs.DeliverWorkPieceTask deliverWorkPieceTask_;
    /// <summary>
    ///optional PrepareCapTask prepareCapTask = 9;
    ///optional DisposeWorkPieceTask disposeWorkPieceTask = 10;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.DeliverWorkPieceTask DeliverWorkPieceTask {
      get { return deliverWorkPieceTask_; }
      set {
        deliverWorkPieceTask_ = value;
      }
    }

    /// <summary>Field number for the "sendPrepareMachineTask" field.</summary>
    public const int SendPrepareMachineTaskFieldNumber = 12;
    private global::LlsfMsgs.SendPrepareMachineTask sendPrepareMachineTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.SendPrepareMachineTask SendPrepareMachineTask {
      get { return sendPrepareMachineTask_; }
      set {
        sendPrepareMachineTask_ = value;
      }
    }

    /// <summary>Field number for the "stopRobot" field.</summary>
    public const int StopRobotFieldNumber = 13;
    private readonly static bool StopRobotDefaultValue = false;

    private bool stopRobot_;
    /// <summary>
    /// set true to stop all the robots
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StopRobot {
      get { if ((_hasBits0 & 32) != 0) { return stopRobot_; } else { return StopRobotDefaultValue; } }
      set {
        _hasBits0 |= 32;
        stopRobot_ = value;
      }
    }
    /// <summary>Gets whether the "stopRobot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStopRobot {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "stopRobot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStopRobot() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "cancelTask" field.</summary>
    public const int CancelTaskFieldNumber = 14;
    private readonly static bool CancelTaskDefaultValue = false;

    private bool cancelTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CancelTask {
      get { if ((_hasBits0 & 64) != 0) { return cancelTask_; } else { return CancelTaskDefaultValue; } }
      set {
        _hasBits0 |= 64;
        cancelTask_ = value;
      }
    }
    /// <summary>Gets whether the "cancelTask" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCancelTask {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "cancelTask" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCancelTask() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "moveToWayPointTask" field.</summary>
    public const int MoveToWayPointTaskFieldNumber = 15;
    private global::LlsfMsgs.MoveToWayPointTask moveToWayPointTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.MoveToWayPointTask MoveToWayPointTask {
      get { return moveToWayPointTask_; }
      set {
        moveToWayPointTask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrsTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrsTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamColor != other.TeamColor) return false;
      if (TaskId != other.TaskId) return false;
      if (RobotId != other.RobotId) return false;
      if (ExecutionResult != other.ExecutionResult) return false;
      if (HoldProduct != other.HoldProduct) return false;
      if (!object.Equals(ReportAllMachinesTask, other.ReportAllMachinesTask)) return false;
      if (!object.Equals(ExploreMachineAtWaypointTask, other.ExploreMachineAtWaypointTask)) return false;
      if (!object.Equals(GetWorkPieceTask, other.GetWorkPieceTask)) return false;
      if (!object.Equals(DeliverWorkPieceTask, other.DeliverWorkPieceTask)) return false;
      if (!object.Equals(SendPrepareMachineTask, other.SendPrepareMachineTask)) return false;
      if (StopRobot != other.StopRobot) return false;
      if (CancelTask != other.CancelTask) return false;
      if (!object.Equals(MoveToWayPointTask, other.MoveToWayPointTask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTeamColor) hash ^= TeamColor.GetHashCode();
      if (HasTaskId) hash ^= TaskId.GetHashCode();
      if (HasRobotId) hash ^= RobotId.GetHashCode();
      if (HasExecutionResult) hash ^= ExecutionResult.GetHashCode();
      if (HasHoldProduct) hash ^= HoldProduct.GetHashCode();
      if (reportAllMachinesTask_ != null) hash ^= ReportAllMachinesTask.GetHashCode();
      if (exploreMachineAtWaypointTask_ != null) hash ^= ExploreMachineAtWaypointTask.GetHashCode();
      if (getWorkPieceTask_ != null) hash ^= GetWorkPieceTask.GetHashCode();
      if (deliverWorkPieceTask_ != null) hash ^= DeliverWorkPieceTask.GetHashCode();
      if (sendPrepareMachineTask_ != null) hash ^= SendPrepareMachineTask.GetHashCode();
      if (HasStopRobot) hash ^= StopRobot.GetHashCode();
      if (HasCancelTask) hash ^= CancelTask.GetHashCode();
      if (moveToWayPointTask_ != null) hash ^= MoveToWayPointTask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTeamColor) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TeamColor);
      }
      if (HasTaskId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (HasRobotId) {
        output.WriteRawTag(24);
        output.WriteUInt32(RobotId);
      }
      if (HasExecutionResult) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ExecutionResult);
      }
      if (HasHoldProduct) {
        output.WriteRawTag(40);
        output.WriteBool(HoldProduct);
      }
      if (reportAllMachinesTask_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ReportAllMachinesTask);
      }
      if (exploreMachineAtWaypointTask_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ExploreMachineAtWaypointTask);
      }
      if (getWorkPieceTask_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(GetWorkPieceTask);
      }
      if (deliverWorkPieceTask_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DeliverWorkPieceTask);
      }
      if (sendPrepareMachineTask_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SendPrepareMachineTask);
      }
      if (HasStopRobot) {
        output.WriteRawTag(104);
        output.WriteBool(StopRobot);
      }
      if (HasCancelTask) {
        output.WriteRawTag(112);
        output.WriteBool(CancelTask);
      }
      if (moveToWayPointTask_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(MoveToWayPointTask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTeamColor) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TeamColor);
      }
      if (HasTaskId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (HasRobotId) {
        output.WriteRawTag(24);
        output.WriteUInt32(RobotId);
      }
      if (HasExecutionResult) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ExecutionResult);
      }
      if (HasHoldProduct) {
        output.WriteRawTag(40);
        output.WriteBool(HoldProduct);
      }
      if (reportAllMachinesTask_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ReportAllMachinesTask);
      }
      if (exploreMachineAtWaypointTask_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ExploreMachineAtWaypointTask);
      }
      if (getWorkPieceTask_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(GetWorkPieceTask);
      }
      if (deliverWorkPieceTask_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DeliverWorkPieceTask);
      }
      if (sendPrepareMachineTask_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SendPrepareMachineTask);
      }
      if (HasStopRobot) {
        output.WriteRawTag(104);
        output.WriteBool(StopRobot);
      }
      if (HasCancelTask) {
        output.WriteRawTag(112);
        output.WriteBool(CancelTask);
      }
      if (moveToWayPointTask_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(MoveToWayPointTask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTeamColor) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TeamColor);
      }
      if (HasTaskId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (HasRobotId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RobotId);
      }
      if (HasExecutionResult) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExecutionResult);
      }
      if (HasHoldProduct) {
        size += 1 + 1;
      }
      if (reportAllMachinesTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReportAllMachinesTask);
      }
      if (exploreMachineAtWaypointTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExploreMachineAtWaypointTask);
      }
      if (getWorkPieceTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetWorkPieceTask);
      }
      if (deliverWorkPieceTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeliverWorkPieceTask);
      }
      if (sendPrepareMachineTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendPrepareMachineTask);
      }
      if (HasStopRobot) {
        size += 1 + 1;
      }
      if (HasCancelTask) {
        size += 1 + 1;
      }
      if (moveToWayPointTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveToWayPointTask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrsTask other) {
      if (other == null) {
        return;
      }
      if (other.HasTeamColor) {
        TeamColor = other.TeamColor;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasRobotId) {
        RobotId = other.RobotId;
      }
      if (other.HasExecutionResult) {
        ExecutionResult = other.ExecutionResult;
      }
      if (other.HasHoldProduct) {
        HoldProduct = other.HoldProduct;
      }
      if (other.reportAllMachinesTask_ != null) {
        if (reportAllMachinesTask_ == null) {
          ReportAllMachinesTask = new global::LlsfMsgs.ReportAllMachinesTask();
        }
        ReportAllMachinesTask.MergeFrom(other.ReportAllMachinesTask);
      }
      if (other.exploreMachineAtWaypointTask_ != null) {
        if (exploreMachineAtWaypointTask_ == null) {
          ExploreMachineAtWaypointTask = new global::LlsfMsgs.ExploreMachineAtWaypointTask();
        }
        ExploreMachineAtWaypointTask.MergeFrom(other.ExploreMachineAtWaypointTask);
      }
      if (other.getWorkPieceTask_ != null) {
        if (getWorkPieceTask_ == null) {
          GetWorkPieceTask = new global::LlsfMsgs.GetWorkPieceTask();
        }
        GetWorkPieceTask.MergeFrom(other.GetWorkPieceTask);
      }
      if (other.deliverWorkPieceTask_ != null) {
        if (deliverWorkPieceTask_ == null) {
          DeliverWorkPieceTask = new global::LlsfMsgs.DeliverWorkPieceTask();
        }
        DeliverWorkPieceTask.MergeFrom(other.DeliverWorkPieceTask);
      }
      if (other.sendPrepareMachineTask_ != null) {
        if (sendPrepareMachineTask_ == null) {
          SendPrepareMachineTask = new global::LlsfMsgs.SendPrepareMachineTask();
        }
        SendPrepareMachineTask.MergeFrom(other.SendPrepareMachineTask);
      }
      if (other.HasStopRobot) {
        StopRobot = other.StopRobot;
      }
      if (other.HasCancelTask) {
        CancelTask = other.CancelTask;
      }
      if (other.moveToWayPointTask_ != null) {
        if (moveToWayPointTask_ == null) {
          MoveToWayPointTask = new global::LlsfMsgs.MoveToWayPointTask();
        }
        MoveToWayPointTask.MergeFrom(other.MoveToWayPointTask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            RobotId = input.ReadUInt32();
            break;
          }
          case 32: {
            ExecutionResult = (global::LlsfMsgs.PrsTask.Types.ExecutionResult) input.ReadEnum();
            break;
          }
          case 40: {
            HoldProduct = input.ReadBool();
            break;
          }
          case 50: {
            if (reportAllMachinesTask_ == null) {
              ReportAllMachinesTask = new global::LlsfMsgs.ReportAllMachinesTask();
            }
            input.ReadMessage(ReportAllMachinesTask);
            break;
          }
          case 58: {
            if (exploreMachineAtWaypointTask_ == null) {
              ExploreMachineAtWaypointTask = new global::LlsfMsgs.ExploreMachineAtWaypointTask();
            }
            input.ReadMessage(ExploreMachineAtWaypointTask);
            break;
          }
          case 66: {
            if (getWorkPieceTask_ == null) {
              GetWorkPieceTask = new global::LlsfMsgs.GetWorkPieceTask();
            }
            input.ReadMessage(GetWorkPieceTask);
            break;
          }
          case 90: {
            if (deliverWorkPieceTask_ == null) {
              DeliverWorkPieceTask = new global::LlsfMsgs.DeliverWorkPieceTask();
            }
            input.ReadMessage(DeliverWorkPieceTask);
            break;
          }
          case 98: {
            if (sendPrepareMachineTask_ == null) {
              SendPrepareMachineTask = new global::LlsfMsgs.SendPrepareMachineTask();
            }
            input.ReadMessage(SendPrepareMachineTask);
            break;
          }
          case 104: {
            StopRobot = input.ReadBool();
            break;
          }
          case 112: {
            CancelTask = input.ReadBool();
            break;
          }
          case 122: {
            if (moveToWayPointTask_ == null) {
              MoveToWayPointTask = new global::LlsfMsgs.MoveToWayPointTask();
            }
            input.ReadMessage(MoveToWayPointTask);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            RobotId = input.ReadUInt32();
            break;
          }
          case 32: {
            ExecutionResult = (global::LlsfMsgs.PrsTask.Types.ExecutionResult) input.ReadEnum();
            break;
          }
          case 40: {
            HoldProduct = input.ReadBool();
            break;
          }
          case 50: {
            if (reportAllMachinesTask_ == null) {
              ReportAllMachinesTask = new global::LlsfMsgs.ReportAllMachinesTask();
            }
            input.ReadMessage(ReportAllMachinesTask);
            break;
          }
          case 58: {
            if (exploreMachineAtWaypointTask_ == null) {
              ExploreMachineAtWaypointTask = new global::LlsfMsgs.ExploreMachineAtWaypointTask();
            }
            input.ReadMessage(ExploreMachineAtWaypointTask);
            break;
          }
          case 66: {
            if (getWorkPieceTask_ == null) {
              GetWorkPieceTask = new global::LlsfMsgs.GetWorkPieceTask();
            }
            input.ReadMessage(GetWorkPieceTask);
            break;
          }
          case 90: {
            if (deliverWorkPieceTask_ == null) {
              DeliverWorkPieceTask = new global::LlsfMsgs.DeliverWorkPieceTask();
            }
            input.ReadMessage(DeliverWorkPieceTask);
            break;
          }
          case 98: {
            if (sendPrepareMachineTask_ == null) {
              SendPrepareMachineTask = new global::LlsfMsgs.SendPrepareMachineTask();
            }
            input.ReadMessage(SendPrepareMachineTask);
            break;
          }
          case 104: {
            StopRobot = input.ReadBool();
            break;
          }
          case 112: {
            CancelTask = input.ReadBool();
            break;
          }
          case 122: {
            if (moveToWayPointTask_ == null) {
              MoveToWayPointTask = new global::LlsfMsgs.MoveToWayPointTask();
            }
            input.ReadMessage(MoveToWayPointTask);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PrsTask message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 5006,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 701,
      }

      public enum ExecutionResult {
        [pbr::OriginalName("SUCCESS")] Success = 1,
        [pbr::OriginalName("FAIL")] Fail = 2,
        [pbr::OriginalName("ABORTED")] Aborted = 3,
        [pbr::OriginalName("BUSY")] Busy = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// Instructs the Teamserver to send a preparemachine
  /// </summary>
  public sealed partial class SendPrepareMachineTask : pb::IMessage<SendPrepareMachineTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendPrepareMachineTask> _parser = new pb::MessageParser<SendPrepareMachineTask>(() => new SendPrepareMachineTask());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendPrepareMachineTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.PrsTaskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPrepareMachineTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPrepareMachineTask(SendPrepareMachineTask other) : this() {
      _hasBits0 = other._hasBits0;
      machineConfigured_ = other.machineConfigured_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPrepareMachineTask Clone() {
      return new SendPrepareMachineTask(this);
    }

    /// <summary>Field number for the "machine_configured" field.</summary>
    public const int MachineConfiguredFieldNumber = 1;
    private readonly static bool MachineConfiguredDefaultValue = false;

    private bool machineConfigured_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MachineConfigured {
      get { if ((_hasBits0 & 1) != 0) { return machineConfigured_; } else { return MachineConfiguredDefaultValue; } }
      set {
        _hasBits0 |= 1;
        machineConfigured_ = value;
      }
    }
    /// <summary>Gets whether the "machine_configured" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachineConfigured {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "machine_configured" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachineConfigured() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendPrepareMachineTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendPrepareMachineTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineConfigured != other.MachineConfigured) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMachineConfigured) hash ^= MachineConfigured.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMachineConfigured) {
        output.WriteRawTag(8);
        output.WriteBool(MachineConfigured);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMachineConfigured) {
        output.WriteRawTag(8);
        output.WriteBool(MachineConfigured);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMachineConfigured) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendPrepareMachineTask other) {
      if (other == null) {
        return;
      }
      if (other.HasMachineConfigured) {
        MachineConfigured = other.MachineConfigured;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MachineConfigured = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MachineConfigured = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Move to the given machine if known in TF or to the zone otherwhise and explore the machine there
  /// </summary>
  public sealed partial class ExploreMachineAtWaypointTask : pb::IMessage<ExploreMachineAtWaypointTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExploreMachineAtWaypointTask> _parser = new pb::MessageParser<ExploreMachineAtWaypointTask>(() => new ExploreMachineAtWaypointTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExploreMachineAtWaypointTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.PrsTaskReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreMachineAtWaypointTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreMachineAtWaypointTask(ExploreMachineAtWaypointTask other) : this() {
      machine_ = other.machine_;
      side_ = other.side_;
      zoneId_ = other.zoneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreMachineAtWaypointTask Clone() {
      return new ExploreMachineAtWaypointTask(this);
    }

    /// <summary>Field number for the "machine" field.</summary>
    public const int MachineFieldNumber = 1;
    private readonly static string MachineDefaultValue = "";

    private string machine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Machine {
      get { return machine_ ?? MachineDefaultValue; }
      set {
        machine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachine {
      get { return machine_ != null; }
    }
    /// <summary>Clears the value of the "machine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachine() {
      machine_ = null;
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private readonly static string SideDefaultValue = "";

    private string side_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Side {
      get { return side_ ?? SideDefaultValue; }
      set {
        side_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "side" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSide {
      get { return side_ != null; }
    }
    /// <summary>Clears the value of the "side" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSide() {
      side_ = null;
    }

    /// <summary>Field number for the "zoneId" field.</summary>
    public const int ZoneIdFieldNumber = 3;
    private readonly static string ZoneIdDefaultValue = "";

    private string zoneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_ ?? ZoneIdDefaultValue; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "zoneId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZoneId {
      get { return zoneId_ != null; }
    }
    /// <summary>Clears the value of the "zoneId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZoneId() {
      zoneId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExploreMachineAtWaypointTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExploreMachineAtWaypointTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Machine != other.Machine) return false;
      if (Side != other.Side) return false;
      if (ZoneId != other.ZoneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMachine) hash ^= Machine.GetHashCode();
      if (HasSide) hash ^= Side.GetHashCode();
      if (HasZoneId) hash ^= ZoneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMachine) {
        output.WriteRawTag(10);
        output.WriteString(Machine);
      }
      if (HasSide) {
        output.WriteRawTag(18);
        output.WriteString(Side);
      }
      if (HasZoneId) {
        output.WriteRawTag(26);
        output.WriteString(ZoneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMachine) {
        output.WriteRawTag(10);
        output.WriteString(Machine);
      }
      if (HasSide) {
        output.WriteRawTag(18);
        output.WriteString(Side);
      }
      if (HasZoneId) {
        output.WriteRawTag(26);
        output.WriteString(ZoneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMachine) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Machine);
      }
      if (HasSide) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Side);
      }
      if (HasZoneId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExploreMachineAtWaypointTask other) {
      if (other == null) {
        return;
      }
      if (other.HasMachine) {
        Machine = other.Machine;
      }
      if (other.HasSide) {
        Side = other.Side;
      }
      if (other.HasZoneId) {
        ZoneId = other.ZoneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Machine = input.ReadString();
            break;
          }
          case 18: {
            Side = input.ReadString();
            break;
          }
          case 26: {
            ZoneId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Machine = input.ReadString();
            break;
          }
          case 18: {
            Side = input.ReadString();
            break;
          }
          case 26: {
            ZoneId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send all observations to the team server
  /// </summary>
  public sealed partial class ReportAllMachinesTask : pb::IMessage<ReportAllMachinesTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportAllMachinesTask> _parser = new pb::MessageParser<ReportAllMachinesTask>(() => new ReportAllMachinesTask());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportAllMachinesTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.PrsTaskReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportAllMachinesTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportAllMachinesTask(ReportAllMachinesTask other) : this() {
      _hasBits0 = other._hasBits0;
      report_ = other.report_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportAllMachinesTask Clone() {
      return new ReportAllMachinesTask(this);
    }

    /// <summary>Field number for the "report" field.</summary>
    public const int ReportFieldNumber = 1;
    private readonly static bool ReportDefaultValue = false;

    private bool report_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Report {
      get { if ((_hasBits0 & 1) != 0) { return report_; } else { return ReportDefaultValue; } }
      set {
        _hasBits0 |= 1;
        report_ = value;
      }
    }
    /// <summary>Gets whether the "report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReport {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "report" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReport() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportAllMachinesTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportAllMachinesTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Report != other.Report) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReport) hash ^= Report.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReport) {
        output.WriteRawTag(8);
        output.WriteBool(Report);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReport) {
        output.WriteRawTag(8);
        output.WriteBool(Report);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasReport) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportAllMachinesTask other) {
      if (other == null) {
        return;
      }
      if (other.HasReport) {
        Report = other.Report;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Report = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Report = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Get a workpiece at the given station and hold the product in the gripper
  /// </summary>
  public sealed partial class GetWorkPieceTask : pb::IMessage<GetWorkPieceTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetWorkPieceTask> _parser = new pb::MessageParser<GetWorkPieceTask>(() => new GetWorkPieceTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetWorkPieceTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.PrsTaskReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWorkPieceTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWorkPieceTask(GetWorkPieceTask other) : this() {
      providingStation_ = other.providingStation_;
      providingType_ = other.providingType_;
      shelfslide_ = other.shelfslide_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWorkPieceTask Clone() {
      return new GetWorkPieceTask(this);
    }

    /// <summary>Field number for the "providing_station" field.</summary>
    public const int ProvidingStationFieldNumber = 1;
    private readonly static string ProvidingStationDefaultValue = "";

    private string providingStation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProvidingStation {
      get { return providingStation_ ?? ProvidingStationDefaultValue; }
      set {
        providingStation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "providing_station" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProvidingStation {
      get { return providingStation_ != null; }
    }
    /// <summary>Clears the value of the "providing_station" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProvidingStation() {
      providingStation_ = null;
    }

    /// <summary>Field number for the "providing_type" field.</summary>
    public const int ProvidingTypeFieldNumber = 2;
    private readonly static string ProvidingTypeDefaultValue = "";

    private string providingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProvidingType {
      get { return providingType_ ?? ProvidingTypeDefaultValue; }
      set {
        providingType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "providing_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProvidingType {
      get { return providingType_ != null; }
    }
    /// <summary>Clears the value of the "providing_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProvidingType() {
      providingType_ = null;
    }

    /// <summary>Field number for the "shelfslide" field.</summary>
    public const int ShelfslideFieldNumber = 3;
    private readonly static string ShelfslideDefaultValue = "";

    private string shelfslide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shelfslide {
      get { return shelfslide_ ?? ShelfslideDefaultValue; }
      set {
        shelfslide_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shelfslide" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShelfslide {
      get { return shelfslide_ != null; }
    }
    /// <summary>Clears the value of the "shelfslide" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShelfslide() {
      shelfslide_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetWorkPieceTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetWorkPieceTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProvidingStation != other.ProvidingStation) return false;
      if (ProvidingType != other.ProvidingType) return false;
      if (Shelfslide != other.Shelfslide) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProvidingStation) hash ^= ProvidingStation.GetHashCode();
      if (HasProvidingType) hash ^= ProvidingType.GetHashCode();
      if (HasShelfslide) hash ^= Shelfslide.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasProvidingStation) {
        output.WriteRawTag(10);
        output.WriteString(ProvidingStation);
      }
      if (HasProvidingType) {
        output.WriteRawTag(18);
        output.WriteString(ProvidingType);
      }
      if (HasShelfslide) {
        output.WriteRawTag(26);
        output.WriteString(Shelfslide);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasProvidingStation) {
        output.WriteRawTag(10);
        output.WriteString(ProvidingStation);
      }
      if (HasProvidingType) {
        output.WriteRawTag(18);
        output.WriteString(ProvidingType);
      }
      if (HasShelfslide) {
        output.WriteRawTag(26);
        output.WriteString(Shelfslide);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasProvidingStation) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProvidingStation);
      }
      if (HasProvidingType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProvidingType);
      }
      if (HasShelfslide) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shelfslide);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetWorkPieceTask other) {
      if (other == null) {
        return;
      }
      if (other.HasProvidingStation) {
        ProvidingStation = other.ProvidingStation;
      }
      if (other.HasProvidingType) {
        ProvidingType = other.ProvidingType;
      }
      if (other.HasShelfslide) {
        Shelfslide = other.Shelfslide;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProvidingStation = input.ReadString();
            break;
          }
          case 18: {
            ProvidingType = input.ReadString();
            break;
          }
          case 26: {
            Shelfslide = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProvidingStation = input.ReadString();
            break;
          }
          case 18: {
            ProvidingType = input.ReadString();
            break;
          }
          case 26: {
            Shelfslide = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Deliver the product in the gripper to the given station
  /// </summary>
  public sealed partial class DeliverWorkPieceTask : pb::IMessage<DeliverWorkPieceTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeliverWorkPieceTask> _parser = new pb::MessageParser<DeliverWorkPieceTask>(() => new DeliverWorkPieceTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeliverWorkPieceTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.PrsTaskReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliverWorkPieceTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliverWorkPieceTask(DeliverWorkPieceTask other) : this() {
      deliveredStation_ = other.deliveredStation_;
      deliveredType_ = other.deliveredType_;
      shelfslide_ = other.shelfslide_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliverWorkPieceTask Clone() {
      return new DeliverWorkPieceTask(this);
    }

    /// <summary>Field number for the "delivered_station" field.</summary>
    public const int DeliveredStationFieldNumber = 1;
    private readonly static string DeliveredStationDefaultValue = "";

    private string deliveredStation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeliveredStation {
      get { return deliveredStation_ ?? DeliveredStationDefaultValue; }
      set {
        deliveredStation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "delivered_station" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeliveredStation {
      get { return deliveredStation_ != null; }
    }
    /// <summary>Clears the value of the "delivered_station" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeliveredStation() {
      deliveredStation_ = null;
    }

    /// <summary>Field number for the "delivered_type" field.</summary>
    public const int DeliveredTypeFieldNumber = 2;
    private readonly static string DeliveredTypeDefaultValue = "";

    private string deliveredType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeliveredType {
      get { return deliveredType_ ?? DeliveredTypeDefaultValue; }
      set {
        deliveredType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "delivered_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeliveredType {
      get { return deliveredType_ != null; }
    }
    /// <summary>Clears the value of the "delivered_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeliveredType() {
      deliveredType_ = null;
    }

    /// <summary>Field number for the "shelfslide" field.</summary>
    public const int ShelfslideFieldNumber = 3;
    private readonly static string ShelfslideDefaultValue = "";

    private string shelfslide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shelfslide {
      get { return shelfslide_ ?? ShelfslideDefaultValue; }
      set {
        shelfslide_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "shelfslide" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShelfslide {
      get { return shelfslide_ != null; }
    }
    /// <summary>Clears the value of the "shelfslide" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShelfslide() {
      shelfslide_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeliverWorkPieceTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeliverWorkPieceTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeliveredStation != other.DeliveredStation) return false;
      if (DeliveredType != other.DeliveredType) return false;
      if (Shelfslide != other.Shelfslide) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDeliveredStation) hash ^= DeliveredStation.GetHashCode();
      if (HasDeliveredType) hash ^= DeliveredType.GetHashCode();
      if (HasShelfslide) hash ^= Shelfslide.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDeliveredStation) {
        output.WriteRawTag(10);
        output.WriteString(DeliveredStation);
      }
      if (HasDeliveredType) {
        output.WriteRawTag(18);
        output.WriteString(DeliveredType);
      }
      if (HasShelfslide) {
        output.WriteRawTag(26);
        output.WriteString(Shelfslide);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDeliveredStation) {
        output.WriteRawTag(10);
        output.WriteString(DeliveredStation);
      }
      if (HasDeliveredType) {
        output.WriteRawTag(18);
        output.WriteString(DeliveredType);
      }
      if (HasShelfslide) {
        output.WriteRawTag(26);
        output.WriteString(Shelfslide);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDeliveredStation) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeliveredStation);
      }
      if (HasDeliveredType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeliveredType);
      }
      if (HasShelfslide) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shelfslide);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeliverWorkPieceTask other) {
      if (other == null) {
        return;
      }
      if (other.HasDeliveredStation) {
        DeliveredStation = other.DeliveredStation;
      }
      if (other.HasDeliveredType) {
        DeliveredType = other.DeliveredType;
      }
      if (other.HasShelfslide) {
        Shelfslide = other.Shelfslide;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeliveredStation = input.ReadString();
            break;
          }
          case 18: {
            DeliveredType = input.ReadString();
            break;
          }
          case 26: {
            Shelfslide = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DeliveredStation = input.ReadString();
            break;
          }
          case 18: {
            DeliveredType = input.ReadString();
            break;
          }
          case 26: {
            Shelfslide = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MoveToWayPointTask : pb::IMessage<MoveToWayPointTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveToWayPointTask> _parser = new pb::MessageParser<MoveToWayPointTask>(() => new MoveToWayPointTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveToWayPointTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.PrsTaskReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToWayPointTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToWayPointTask(MoveToWayPointTask other) : this() {
      waypoint_ = other.waypoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToWayPointTask Clone() {
      return new MoveToWayPointTask(this);
    }

    /// <summary>Field number for the "waypoint" field.</summary>
    public const int WaypointFieldNumber = 1;
    private readonly static string WaypointDefaultValue = "";

    private string waypoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Waypoint {
      get { return waypoint_ ?? WaypointDefaultValue; }
      set {
        waypoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "waypoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWaypoint {
      get { return waypoint_ != null; }
    }
    /// <summary>Clears the value of the "waypoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWaypoint() {
      waypoint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveToWayPointTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveToWayPointTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Waypoint != other.Waypoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWaypoint) hash ^= Waypoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWaypoint) {
        output.WriteRawTag(10);
        output.WriteString(Waypoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWaypoint) {
        output.WriteRawTag(10);
        output.WriteString(Waypoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWaypoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Waypoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveToWayPointTask other) {
      if (other == null) {
        return;
      }
      if (other.HasWaypoint) {
        Waypoint = other.Waypoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Waypoint = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Waypoint = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
