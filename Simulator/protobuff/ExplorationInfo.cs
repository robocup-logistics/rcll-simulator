// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ExplorationInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LlsfMsgs {

  /// <summary>Holder for reflection information generated from ExplorationInfo.proto</summary>
  public static partial class ExplorationInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for ExplorationInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExplorationInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVFeHBsb3JhdGlvbkluZm8ucHJvdG8SCWxsc2ZfbXNncxoRTWFjaGluZUlu",
            "Zm8ucHJvdG8aClRlYW0ucHJvdG8aClpvbmUucHJvdG8ibwoRRXhwbG9yYXRp",
            "b25TaWduYWwSDAoEdHlwZRgBIAIoCRIkCgZsaWdodHMYAiADKAsyFC5sbHNm",
            "X21zZ3MuTGlnaHRTcGVjIiYKCENvbXBUeXBlEgwKB0NPTVBfSUQQ0A8SDAoI",
            "TVNHX1RZUEUQRiJ9Cg9FeHBsb3JhdGlvblpvbmUSHQoEem9uZRgCIAIoDjIP",
            "Lmxsc2ZfbXNncy5ab25lEiMKCnRlYW1fY29sb3IYAyACKA4yDy5sbHNmX21z",
            "Z3MuVGVhbSImCghDb21wVHlwZRIMCgdDT01QX0lEENAPEgwKCE1TR19UWVBF",
            "EEcikwEKD0V4cGxvcmF0aW9uSW5mbxItCgdzaWduYWxzGAEgAygLMhwubGxz",
            "Zl9tc2dzLkV4cGxvcmF0aW9uU2lnbmFsEikKBXpvbmVzGAIgAygLMhoubGxz",
            "Zl9tc2dzLkV4cGxvcmF0aW9uWm9uZSImCghDb21wVHlwZRIMCgdDT01QX0lE",
            "ENAPEgwKCE1TR19UWVBFEEhCOAofb3JnLnJvYm9jdXBfbG9naXN0aWNzLmxs",
            "c2ZfbXNnc0IVRXhwbG9yYXRpb25JbmZvUHJvdG9z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::LlsfMsgs.MachineInfoReflection.Descriptor, global::LlsfMsgs.TeamReflection.Descriptor, global::LlsfMsgs.ZoneReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.ExplorationSignal), global::LlsfMsgs.ExplorationSignal.Parser, new[]{ "Type", "Lights" }, null, new[]{ typeof(global::LlsfMsgs.ExplorationSignal.Types.CompType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.ExplorationZone), global::LlsfMsgs.ExplorationZone.Parser, new[]{ "Zone", "TeamColor" }, null, new[]{ typeof(global::LlsfMsgs.ExplorationZone.Types.CompType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.ExplorationInfo), global::LlsfMsgs.ExplorationInfo.Parser, new[]{ "Signals", "Zones" }, null, new[]{ typeof(global::LlsfMsgs.ExplorationInfo.Types.CompType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ExplorationSignal : pb::IMessage<ExplorationSignal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExplorationSignal> _parser = new pb::MessageParser<ExplorationSignal>(() => new ExplorationSignal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExplorationSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.ExplorationInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorationSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorationSignal(ExplorationSignal other) : this() {
      type_ = other.type_;
      lights_ = other.lights_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorationSignal Clone() {
      return new ExplorationSignal(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// machine type of this assignment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "lights" field.</summary>
    public const int LightsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LlsfMsgs.LightSpec> _repeated_lights_codec
        = pb::FieldCodec.ForMessage(18, global::LlsfMsgs.LightSpec.Parser);
    private readonly pbc::RepeatedField<global::LlsfMsgs.LightSpec> lights_ = new pbc::RepeatedField<global::LlsfMsgs.LightSpec>();
    /// <summary>
    /// Light specification (MachineInfo.proto)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LlsfMsgs.LightSpec> Lights {
      get { return lights_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExplorationSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExplorationSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!lights_.Equals(other.lights_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= lights_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      lights_.WriteTo(output, _repeated_lights_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      lights_.WriteTo(ref output, _repeated_lights_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += lights_.CalculateSize(_repeated_lights_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExplorationSignal other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      lights_.Add(other.lights_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            lights_.AddEntriesFrom(input, _repeated_lights_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            lights_.AddEntriesFrom(ref input, _repeated_lights_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ExplorationSignal message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 70,
      }

    }
    #endregion

  }

  public sealed partial class ExplorationZone : pb::IMessage<ExplorationZone>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExplorationZone> _parser = new pb::MessageParser<ExplorationZone>(() => new ExplorationZone());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExplorationZone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.ExplorationInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorationZone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorationZone(ExplorationZone other) : this() {
      _hasBits0 = other._hasBits0;
      zone_ = other.zone_;
      teamColor_ = other.teamColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorationZone Clone() {
      return new ExplorationZone(this);
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 2;
    private readonly static global::LlsfMsgs.Zone ZoneDefaultValue = global::LlsfMsgs.Zone.CZ18;

    private global::LlsfMsgs.Zone zone_;
    /// <summary>
    /// Zone to explore
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Zone Zone {
      get { if ((_hasBits0 & 1) != 0) { return zone_; } else { return ZoneDefaultValue; } }
      set {
        _hasBits0 |= 1;
        zone_ = value;
      }
    }
    /// <summary>Gets whether the "zone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasZone {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "zone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearZone() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "team_color" field.</summary>
    public const int TeamColorFieldNumber = 3;
    private readonly static global::LlsfMsgs.Team TeamColorDefaultValue = global::LlsfMsgs.Team.Cyan;

    private global::LlsfMsgs.Team teamColor_;
    /// <summary>
    /// Team the machine belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Team TeamColor {
      get { if ((_hasBits0 & 2) != 0) { return teamColor_; } else { return TeamColorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        teamColor_ = value;
      }
    }
    /// <summary>Gets whether the "team_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamColor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "team_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamColor() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExplorationZone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExplorationZone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Zone != other.Zone) return false;
      if (TeamColor != other.TeamColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasZone) hash ^= Zone.GetHashCode();
      if (HasTeamColor) hash ^= TeamColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasZone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Zone);
      }
      if (HasTeamColor) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TeamColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasZone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Zone);
      }
      if (HasTeamColor) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TeamColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasZone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Zone);
      }
      if (HasTeamColor) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TeamColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExplorationZone other) {
      if (other == null) {
        return;
      }
      if (other.HasZone) {
        Zone = other.Zone;
      }
      if (other.HasTeamColor) {
        TeamColor = other.TeamColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Zone = (global::LlsfMsgs.Zone) input.ReadEnum();
            break;
          }
          case 24: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 16: {
            Zone = (global::LlsfMsgs.Zone) input.ReadEnum();
            break;
          }
          case 24: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ExplorationZone message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 71,
      }

    }
    #endregion

  }

  public sealed partial class ExplorationInfo : pb::IMessage<ExplorationInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExplorationInfo> _parser = new pb::MessageParser<ExplorationInfo>(() => new ExplorationInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExplorationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.ExplorationInfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorationInfo(ExplorationInfo other) : this() {
      signals_ = other.signals_.Clone();
      zones_ = other.zones_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExplorationInfo Clone() {
      return new ExplorationInfo(this);
    }

    /// <summary>Field number for the "signals" field.</summary>
    public const int SignalsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LlsfMsgs.ExplorationSignal> _repeated_signals_codec
        = pb::FieldCodec.ForMessage(10, global::LlsfMsgs.ExplorationSignal.Parser);
    private readonly pbc::RepeatedField<global::LlsfMsgs.ExplorationSignal> signals_ = new pbc::RepeatedField<global::LlsfMsgs.ExplorationSignal>();
    /// <summary>
    /// The signal assignments
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LlsfMsgs.ExplorationSignal> Signals {
      get { return signals_; }
    }

    /// <summary>Field number for the "zones" field.</summary>
    public const int ZonesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LlsfMsgs.ExplorationZone> _repeated_zones_codec
        = pb::FieldCodec.ForMessage(18, global::LlsfMsgs.ExplorationZone.Parser);
    private readonly pbc::RepeatedField<global::LlsfMsgs.ExplorationZone> zones_ = new pbc::RepeatedField<global::LlsfMsgs.ExplorationZone>();
    /// <summary>
    /// The zones to explore
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LlsfMsgs.ExplorationZone> Zones {
      get { return zones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExplorationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExplorationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!signals_.Equals(other.signals_)) return false;
      if(!zones_.Equals(other.zones_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= signals_.GetHashCode();
      hash ^= zones_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      signals_.WriteTo(output, _repeated_signals_codec);
      zones_.WriteTo(output, _repeated_zones_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      signals_.WriteTo(ref output, _repeated_signals_codec);
      zones_.WriteTo(ref output, _repeated_zones_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += signals_.CalculateSize(_repeated_signals_codec);
      size += zones_.CalculateSize(_repeated_zones_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExplorationInfo other) {
      if (other == null) {
        return;
      }
      signals_.Add(other.signals_);
      zones_.Add(other.zones_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            signals_.AddEntriesFrom(input, _repeated_signals_codec);
            break;
          }
          case 18: {
            zones_.AddEntriesFrom(input, _repeated_zones_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            signals_.AddEntriesFrom(ref input, _repeated_signals_codec);
            break;
          }
          case 18: {
            zones_.AddEntriesFrom(ref input, _repeated_zones_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ExplorationInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 72,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
