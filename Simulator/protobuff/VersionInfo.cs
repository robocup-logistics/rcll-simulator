// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: VersionInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LlsfMsgs {

  /// <summary>Holder for reflection information generated from VersionInfo.proto</summary>
  public static partial class VersionInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for VersionInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VersionInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFWZXJzaW9uSW5mby5wcm90bxIJbGxzZl9tc2dzIpIBCgtWZXJzaW9uSW5m",
            "bxIVCg12ZXJzaW9uX21ham9yGAEgAigNEhUKDXZlcnNpb25fbWlub3IYAiAC",
            "KA0SFQoNdmVyc2lvbl9taWNybxgDIAIoDRIWCg52ZXJzaW9uX3N0cmluZxgE",
            "IAIoCSImCghDb21wVHlwZRIMCgdDT01QX0lEENAPEgwKCE1TR19UWVBFEANC",
            "MAofb3JnLnJvYm9jdXBfbG9naXN0aWNzLmxsc2ZfbXNnc0INVmVyc2lvblBy",
            "b3Rvcw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.VersionInfo), global::LlsfMsgs.VersionInfo.Parser, new[]{ "VersionMajor", "VersionMinor", "VersionMicro", "VersionString" }, null, new[]{ typeof(global::LlsfMsgs.VersionInfo.Types.CompType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VersionInfo : pb::IMessage<VersionInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VersionInfo> _parser = new pb::MessageParser<VersionInfo>(() => new VersionInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.VersionInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionInfo(VersionInfo other) : this() {
      _hasBits0 = other._hasBits0;
      versionMajor_ = other.versionMajor_;
      versionMinor_ = other.versionMinor_;
      versionMicro_ = other.versionMicro_;
      versionString_ = other.versionString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionInfo Clone() {
      return new VersionInfo(this);
    }

    /// <summary>Field number for the "version_major" field.</summary>
    public const int VersionMajorFieldNumber = 1;
    private readonly static uint VersionMajorDefaultValue = 0;

    private uint versionMajor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VersionMajor {
      get { if ((_hasBits0 & 1) != 0) { return versionMajor_; } else { return VersionMajorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        versionMajor_ = value;
      }
    }
    /// <summary>Gets whether the "version_major" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionMajor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "version_major" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionMajor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "version_minor" field.</summary>
    public const int VersionMinorFieldNumber = 2;
    private readonly static uint VersionMinorDefaultValue = 0;

    private uint versionMinor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VersionMinor {
      get { if ((_hasBits0 & 2) != 0) { return versionMinor_; } else { return VersionMinorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        versionMinor_ = value;
      }
    }
    /// <summary>Gets whether the "version_minor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionMinor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "version_minor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionMinor() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "version_micro" field.</summary>
    public const int VersionMicroFieldNumber = 3;
    private readonly static uint VersionMicroDefaultValue = 0;

    private uint versionMicro_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VersionMicro {
      get { if ((_hasBits0 & 4) != 0) { return versionMicro_; } else { return VersionMicroDefaultValue; } }
      set {
        _hasBits0 |= 4;
        versionMicro_ = value;
      }
    }
    /// <summary>Gets whether the "version_micro" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionMicro {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "version_micro" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionMicro() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "version_string" field.</summary>
    public const int VersionStringFieldNumber = 4;
    private readonly static string VersionStringDefaultValue = "";

    private string versionString_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionString {
      get { return versionString_ ?? VersionStringDefaultValue; }
      set {
        versionString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "version_string" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersionString {
      get { return versionString_ != null; }
    }
    /// <summary>Clears the value of the "version_string" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionString() {
      versionString_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VersionMajor != other.VersionMajor) return false;
      if (VersionMinor != other.VersionMinor) return false;
      if (VersionMicro != other.VersionMicro) return false;
      if (VersionString != other.VersionString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVersionMajor) hash ^= VersionMajor.GetHashCode();
      if (HasVersionMinor) hash ^= VersionMinor.GetHashCode();
      if (HasVersionMicro) hash ^= VersionMicro.GetHashCode();
      if (HasVersionString) hash ^= VersionString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVersionMajor) {
        output.WriteRawTag(8);
        output.WriteUInt32(VersionMajor);
      }
      if (HasVersionMinor) {
        output.WriteRawTag(16);
        output.WriteUInt32(VersionMinor);
      }
      if (HasVersionMicro) {
        output.WriteRawTag(24);
        output.WriteUInt32(VersionMicro);
      }
      if (HasVersionString) {
        output.WriteRawTag(34);
        output.WriteString(VersionString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVersionMajor) {
        output.WriteRawTag(8);
        output.WriteUInt32(VersionMajor);
      }
      if (HasVersionMinor) {
        output.WriteRawTag(16);
        output.WriteUInt32(VersionMinor);
      }
      if (HasVersionMicro) {
        output.WriteRawTag(24);
        output.WriteUInt32(VersionMicro);
      }
      if (HasVersionString) {
        output.WriteRawTag(34);
        output.WriteString(VersionString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVersionMajor) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionMajor);
      }
      if (HasVersionMinor) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionMinor);
      }
      if (HasVersionMicro) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionMicro);
      }
      if (HasVersionString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasVersionMajor) {
        VersionMajor = other.VersionMajor;
      }
      if (other.HasVersionMinor) {
        VersionMinor = other.VersionMinor;
      }
      if (other.HasVersionMicro) {
        VersionMicro = other.VersionMicro;
      }
      if (other.HasVersionString) {
        VersionString = other.VersionString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VersionMajor = input.ReadUInt32();
            break;
          }
          case 16: {
            VersionMinor = input.ReadUInt32();
            break;
          }
          case 24: {
            VersionMicro = input.ReadUInt32();
            break;
          }
          case 34: {
            VersionString = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            VersionMajor = input.ReadUInt32();
            break;
          }
          case 16: {
            VersionMinor = input.ReadUInt32();
            break;
          }
          case 24: {
            VersionMicro = input.ReadUInt32();
            break;
          }
          case 34: {
            VersionString = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the VersionInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
