// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LlsfMsgs {

  /// <summary>Holder for reflection information generated from GameState.proto</summary>
  public static partial class GameStateReflection {

    #region Descriptor
    /// <summary>File descriptor for GameState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9HYW1lU3RhdGUucHJvdG8SCWxsc2ZfbXNncxoKVGltZS5wcm90byKRAwoJ",
            "R2FtZVN0YXRlEiIKCWdhbWVfdGltZRgBIAIoCzIPLmxsc2ZfbXNncy5UaW1l",
            "EikKBXN0YXRlGAMgAigOMhoubGxzZl9tc2dzLkdhbWVTdGF0ZS5TdGF0ZRIp",
            "CgVwaGFzZRgEIAIoDjIaLmxsc2ZfbXNncy5HYW1lU3RhdGUuUGhhc2USEwoL",
            "cG9pbnRzX2N5YW4YBSABKA0SEQoJdGVhbV9jeWFuGAYgASgJEhYKDnBvaW50",
            "c19tYWdlbnRhGAggASgNEhQKDHRlYW1fbWFnZW50YRgJIAEoCSImCghDb21w",
            "VHlwZRIMCgdDT01QX0lEENAPEgwKCE1TR19UWVBFEBQiOgoFU3RhdGUSCAoE",
            "SU5JVBAAEg4KCldBSVRfU1RBUlQQARILCgdSVU5OSU5HEAISCgoGUEFVU0VE",
            "EAMiUAoFUGhhc2USDAoIUFJFX0dBTUUQABIJCgVTRVRVUBAKEg8KC0VYUExP",
            "UkFUSU9OEBQSDgoKUFJPRFVDVElPThAeEg0KCVBPU1RfR0FNRRAoImEKDFNl",
            "dEdhbWVTdGF0ZRIpCgVzdGF0ZRgBIAIoDjIaLmxsc2ZfbXNncy5HYW1lU3Rh",
            "dGUuU3RhdGUiJgoIQ29tcFR5cGUSDAoHQ09NUF9JRBDQDxIMCghNU0dfVFlQ",
            "RRAVImEKDFNldEdhbWVQaGFzZRIpCgVwaGFzZRgBIAIoDjIaLmxsc2ZfbXNn",
            "cy5HYW1lU3RhdGUuUGhhc2UiJgoIQ29tcFR5cGUSDAoHQ09NUF9JRBDQDxIM",
            "CghNU0dfVFlQRRAWIjgKDlJhbmRvbWl6ZUZpZWxkIiYKCENvbXBUeXBlEgwK",
            "B0NPTVBfSUQQ0A8SDAoITVNHX1RZUEUQF0IyCh9vcmcucm9ib2N1cF9sb2dp",
            "c3RpY3MubGxzZl9tc2dzQg9HYW1lU3RhdGVQcm90b3M="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Llsfmsgs.TimeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.GameState), global::LlsfMsgs.GameState.Parser, new[]{ "GameTime", "State", "Phase", "PointsCyan", "TeamCyan", "PointsMagenta", "TeamMagenta" }, null, new[]{ typeof(global::LlsfMsgs.GameState.Types.CompType), typeof(global::LlsfMsgs.GameState.Types.State), typeof(global::LlsfMsgs.GameState.Types.Phase) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.SetGameState), global::LlsfMsgs.SetGameState.Parser, new[]{ "State" }, null, new[]{ typeof(global::LlsfMsgs.SetGameState.Types.CompType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.SetGamePhase), global::LlsfMsgs.SetGamePhase.Parser, new[]{ "Phase" }, null, new[]{ typeof(global::LlsfMsgs.SetGamePhase.Types.CompType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.RandomizeField), global::LlsfMsgs.RandomizeField.Parser, null, null, new[]{ typeof(global::LlsfMsgs.RandomizeField.Types.CompType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameState : pb::IMessage<GameState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.GameStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      _hasBits0 = other._hasBits0;
      gameTime_ = other.gameTime_ != null ? other.gameTime_.Clone() : null;
      state_ = other.state_;
      phase_ = other.phase_;
      pointsCyan_ = other.pointsCyan_;
      teamCyan_ = other.teamCyan_;
      pointsMagenta_ = other.pointsMagenta_;
      teamMagenta_ = other.teamMagenta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 1;
    private global::Llsfmsgs.Time gameTime_;
    /// <summary>
    /// Time in seconds since game start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Llsfmsgs.Time GameTime {
      get { return gameTime_; }
      set {
        gameTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private readonly static global::LlsfMsgs.GameState.Types.State StateDefaultValue = global::LlsfMsgs.GameState.Types.State.Init;

    private global::LlsfMsgs.GameState.Types.State state_;
    /// <summary>
    /// Current game state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.GameState.Types.State State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 4;
    private readonly static global::LlsfMsgs.GameState.Types.Phase PhaseDefaultValue = global::LlsfMsgs.GameState.Types.Phase.PreGame;

    private global::LlsfMsgs.GameState.Types.Phase phase_;
    /// <summary>
    /// Current game phase
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.GameState.Types.Phase Phase {
      get { if ((_hasBits0 & 2) != 0) { return phase_; } else { return PhaseDefaultValue; } }
      set {
        _hasBits0 |= 2;
        phase_ = value;
      }
    }
    /// <summary>Gets whether the "phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhase {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhase() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "points_cyan" field.</summary>
    public const int PointsCyanFieldNumber = 5;
    private readonly static uint PointsCyanDefaultValue = 0;

    private uint pointsCyan_;
    /// <summary>
    /// Awarded points, cyan
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PointsCyan {
      get { if ((_hasBits0 & 4) != 0) { return pointsCyan_; } else { return PointsCyanDefaultValue; } }
      set {
        _hasBits0 |= 4;
        pointsCyan_ = value;
      }
    }
    /// <summary>Gets whether the "points_cyan" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPointsCyan {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "points_cyan" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPointsCyan() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "team_cyan" field.</summary>
    public const int TeamCyanFieldNumber = 6;
    private readonly static string TeamCyanDefaultValue = "";

    private string teamCyan_;
    /// <summary>
    /// Name of the currently playing team
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamCyan {
      get { return teamCyan_ ?? TeamCyanDefaultValue; }
      set {
        teamCyan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "team_cyan" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamCyan {
      get { return teamCyan_ != null; }
    }
    /// <summary>Clears the value of the "team_cyan" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamCyan() {
      teamCyan_ = null;
    }

    /// <summary>Field number for the "points_magenta" field.</summary>
    public const int PointsMagentaFieldNumber = 8;
    private readonly static uint PointsMagentaDefaultValue = 0;

    private uint pointsMagenta_;
    /// <summary>
    /// Awarded points, magenta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PointsMagenta {
      get { if ((_hasBits0 & 8) != 0) { return pointsMagenta_; } else { return PointsMagentaDefaultValue; } }
      set {
        _hasBits0 |= 8;
        pointsMagenta_ = value;
      }
    }
    /// <summary>Gets whether the "points_magenta" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPointsMagenta {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "points_magenta" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPointsMagenta() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "team_magenta" field.</summary>
    public const int TeamMagentaFieldNumber = 9;
    private readonly static string TeamMagentaDefaultValue = "";

    private string teamMagenta_;
    /// <summary>
    /// Name of the currently playing team
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamMagenta {
      get { return teamMagenta_ ?? TeamMagentaDefaultValue; }
      set {
        teamMagenta_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "team_magenta" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamMagenta {
      get { return teamMagenta_ != null; }
    }
    /// <summary>Clears the value of the "team_magenta" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamMagenta() {
      teamMagenta_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameTime, other.GameTime)) return false;
      if (State != other.State) return false;
      if (Phase != other.Phase) return false;
      if (PointsCyan != other.PointsCyan) return false;
      if (TeamCyan != other.TeamCyan) return false;
      if (PointsMagenta != other.PointsMagenta) return false;
      if (TeamMagenta != other.TeamMagenta) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameTime_ != null) hash ^= GameTime.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasPhase) hash ^= Phase.GetHashCode();
      if (HasPointsCyan) hash ^= PointsCyan.GetHashCode();
      if (HasTeamCyan) hash ^= TeamCyan.GetHashCode();
      if (HasPointsMagenta) hash ^= PointsMagenta.GetHashCode();
      if (HasTeamMagenta) hash ^= TeamMagenta.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (gameTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameTime);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (HasPhase) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Phase);
      }
      if (HasPointsCyan) {
        output.WriteRawTag(40);
        output.WriteUInt32(PointsCyan);
      }
      if (HasTeamCyan) {
        output.WriteRawTag(50);
        output.WriteString(TeamCyan);
      }
      if (HasPointsMagenta) {
        output.WriteRawTag(64);
        output.WriteUInt32(PointsMagenta);
      }
      if (HasTeamMagenta) {
        output.WriteRawTag(74);
        output.WriteString(TeamMagenta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (gameTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameTime);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (HasPhase) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Phase);
      }
      if (HasPointsCyan) {
        output.WriteRawTag(40);
        output.WriteUInt32(PointsCyan);
      }
      if (HasTeamCyan) {
        output.WriteRawTag(50);
        output.WriteString(TeamCyan);
      }
      if (HasPointsMagenta) {
        output.WriteRawTag(64);
        output.WriteUInt32(PointsMagenta);
      }
      if (HasTeamMagenta) {
        output.WriteRawTag(74);
        output.WriteString(TeamMagenta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameTime);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (HasPhase) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
      }
      if (HasPointsCyan) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PointsCyan);
      }
      if (HasTeamCyan) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamCyan);
      }
      if (HasPointsMagenta) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PointsMagenta);
      }
      if (HasTeamMagenta) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamMagenta);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.gameTime_ != null) {
        if (gameTime_ == null) {
          GameTime = new global::Llsfmsgs.Time();
        }
        GameTime.MergeFrom(other.GameTime);
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasPhase) {
        Phase = other.Phase;
      }
      if (other.HasPointsCyan) {
        PointsCyan = other.PointsCyan;
      }
      if (other.HasTeamCyan) {
        TeamCyan = other.TeamCyan;
      }
      if (other.HasPointsMagenta) {
        PointsMagenta = other.PointsMagenta;
      }
      if (other.HasTeamMagenta) {
        TeamMagenta = other.TeamMagenta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameTime_ == null) {
              GameTime = new global::Llsfmsgs.Time();
            }
            input.ReadMessage(GameTime);
            break;
          }
          case 24: {
            State = (global::LlsfMsgs.GameState.Types.State) input.ReadEnum();
            break;
          }
          case 32: {
            Phase = (global::LlsfMsgs.GameState.Types.Phase) input.ReadEnum();
            break;
          }
          case 40: {
            PointsCyan = input.ReadUInt32();
            break;
          }
          case 50: {
            TeamCyan = input.ReadString();
            break;
          }
          case 64: {
            PointsMagenta = input.ReadUInt32();
            break;
          }
          case 74: {
            TeamMagenta = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (gameTime_ == null) {
              GameTime = new global::Llsfmsgs.Time();
            }
            input.ReadMessage(GameTime);
            break;
          }
          case 24: {
            State = (global::LlsfMsgs.GameState.Types.State) input.ReadEnum();
            break;
          }
          case 32: {
            Phase = (global::LlsfMsgs.GameState.Types.Phase) input.ReadEnum();
            break;
          }
          case 40: {
            PointsCyan = input.ReadUInt32();
            break;
          }
          case 50: {
            TeamCyan = input.ReadString();
            break;
          }
          case 64: {
            PointsMagenta = input.ReadUInt32();
            break;
          }
          case 74: {
            TeamMagenta = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GameState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 20,
      }

      public enum State {
        [pbr::OriginalName("INIT")] Init = 0,
        [pbr::OriginalName("WAIT_START")] WaitStart = 1,
        [pbr::OriginalName("RUNNING")] Running = 2,
        [pbr::OriginalName("PAUSED")] Paused = 3,
      }

      public enum Phase {
        [pbr::OriginalName("PRE_GAME")] PreGame = 0,
        [pbr::OriginalName("SETUP")] Setup = 10,
        [pbr::OriginalName("EXPLORATION")] Exploration = 20,
        [pbr::OriginalName("PRODUCTION")] Production = 30,
        [pbr::OriginalName("POST_GAME")] PostGame = 40,
      }

    }
    #endregion

  }

  /// <summary>
  /// Request setting of a new game state
  /// </summary>
  public sealed partial class SetGameState : pb::IMessage<SetGameState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetGameState> _parser = new pb::MessageParser<SetGameState>(() => new SetGameState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.GameStateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameState(SetGameState other) : this() {
      _hasBits0 = other._hasBits0;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameState Clone() {
      return new SetGameState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private readonly static global::LlsfMsgs.GameState.Types.State StateDefaultValue = global::LlsfMsgs.GameState.Types.State.Init;

    private global::LlsfMsgs.GameState.Types.State state_;
    /// <summary>
    /// The new desired state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.GameState.Types.State State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasState) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasState) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGameState other) {
      if (other == null) {
        return;
      }
      if (other.HasState) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::LlsfMsgs.GameState.Types.State) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = (global::LlsfMsgs.GameState.Types.State) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SetGameState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 21,
      }

    }
    #endregion

  }

  /// <summary>
  /// Request setting of a new game phase
  /// </summary>
  public sealed partial class SetGamePhase : pb::IMessage<SetGamePhase>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetGamePhase> _parser = new pb::MessageParser<SetGamePhase>(() => new SetGamePhase());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGamePhase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.GameStateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGamePhase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGamePhase(SetGamePhase other) : this() {
      _hasBits0 = other._hasBits0;
      phase_ = other.phase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGamePhase Clone() {
      return new SetGamePhase(this);
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private readonly static global::LlsfMsgs.GameState.Types.Phase PhaseDefaultValue = global::LlsfMsgs.GameState.Types.Phase.PreGame;

    private global::LlsfMsgs.GameState.Types.Phase phase_;
    /// <summary>
    /// The new desired phase
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.GameState.Types.Phase Phase {
      get { if ((_hasBits0 & 1) != 0) { return phase_; } else { return PhaseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        phase_ = value;
      }
    }
    /// <summary>Gets whether the "phase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPhase {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "phase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPhase() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGamePhase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGamePhase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phase != other.Phase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPhase) hash ^= Phase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPhase) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPhase) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPhase) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGamePhase other) {
      if (other == null) {
        return;
      }
      if (other.HasPhase) {
        Phase = other.Phase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Phase = (global::LlsfMsgs.GameState.Types.Phase) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Phase = (global::LlsfMsgs.GameState.Types.Phase) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SetGamePhase message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 22,
      }

    }
    #endregion

  }

  public sealed partial class RandomizeField : pb::IMessage<RandomizeField>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RandomizeField> _parser = new pb::MessageParser<RandomizeField>(() => new RandomizeField());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandomizeField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.GameStateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomizeField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomizeField(RandomizeField other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomizeField Clone() {
      return new RandomizeField(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RandomizeField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RandomizeField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RandomizeField other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RandomizeField message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 23,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
