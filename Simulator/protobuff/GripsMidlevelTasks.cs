// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GripsMidlevelTasks.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LlsfMsgs {

  /// <summary>Holder for reflection information generated from GripsMidlevelTasks.proto</summary>
  public static partial class GripsMidlevelTasksReflection {

    #region Descriptor
    /// <summary>File descriptor for GripsMidlevelTasks.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GripsMidlevelTasksReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhHcmlwc01pZGxldmVsVGFza3MucHJvdG8SCWxsc2ZfbXNncxoKVGVhbS5w",
            "cm90byLYBAoSR3JpcHNNaWRsZXZlbFRhc2tzEiMKCnRlYW1fY29sb3IYASAC",
            "KA4yDy5sbHNmX21zZ3MuVGVhbRIPCgd0YXNrX2lkGAIgAigNEhAKCHJvYm90",
            "X2lkGAMgAigNEjMKEG1vdmVfdG9fd2F5cG9pbnQYBSABKAsyGS5sbHNmX21z",
            "Z3MuTW92ZVRvV2F5cG9pbnQSMwoQZ2V0X2Zyb21fc3RhdGlvbhgGIAEoCzIZ",
            "Lmxsc2ZfbXNncy5HZXRGcm9tU3RhdGlvbhI3ChJkZWxpdmVyX3RvX3N0YXRp",
            "b24YByABKAsyGy5sbHNmX21zZ3MuRGVsaXZlclRvU3RhdGlvbhI3ChJidWZm",
            "ZXJfY2FwX3N0YXRpb24YCCABKAsyGy5sbHNmX21zZ3MuQnVmZmVyQ2FwU3Rh",
            "dGlvbhIyCg9leHBsb3JlX21hY2hpbmUYCSABKAsyGS5sbHNmX21zZ3MuRXhw",
            "bG9yZU1hY2hpbmUSEwoLY2FuY2VsX3Rhc2sYCiABKAgSEgoKcGF1c2VfdGFz",
            "axgLIAEoCBIdChVyZWNlaXZlX21hY2hpbmVfaW5mb3MYDCABKAgSIAoYcmVw",
            "b3J0X2FsbF9zZWVuX21hY2hpbmVzGA0gASgIEhQKDGxvc3RfcHJvZHVjdBgO",
            "IAEoCBISCgpzdWNjZXNzZnVsGA8gASgIEhAKCGNhbmNlbGVkGBEgASgIEhsK",
            "E2Vycm9yX2NvZGVfbWlkbGV2ZWwYECABKA0iJwoIQ29tcFR5cGUSDAoHQ09N",
            "UF9JRBCIJxINCghNU0dfVFlQRRD2AyIiCg5Nb3ZlVG9XYXlwb2ludBIQCgh3",
            "YXlwb2ludBgBIAIoCSI7Cg5HZXRGcm9tU3RhdGlvbhISCgptYWNoaW5lX2lk",
            "GAEgAigJEhUKDW1hY2hpbmVfcG9pbnQYAiACKAkiPQoQRGVsaXZlclRvU3Rh",
            "dGlvbhISCgptYWNoaW5lX2lkGAEgAigJEhUKDW1hY2hpbmVfcG9pbnQYAiAC",
            "KAkiPAoQQnVmZmVyQ2FwU3RhdGlvbhISCgptYWNoaW5lX2lkGAEgAigJEhQK",
            "DHNoZWxmX251bWJlchgCIAIoDSJNCg5FeHBsb3JlTWFjaGluZRISCgptYWNo",
            "aW5lX2lkGAEgAigJEhUKDW1hY2hpbmVfcG9pbnQYAiACKAkSEAoId2F5cG9p",
            "bnQYAyACKAlCOwofb3JnLnJvYm9jdXBfbG9naXN0aWNzLmxsc2ZfbXNnc0IY",
            "R3JpcHNNaWRsZXZlbFRhc2tzUHJvdG9z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::LlsfMsgs.TeamReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.GripsMidlevelTasks), global::LlsfMsgs.GripsMidlevelTasks.Parser, new[]{ "TeamColor", "TaskId", "RobotId", "MoveToWaypoint", "GetFromStation", "DeliverToStation", "BufferCapStation", "ExploreMachine", "CancelTask", "PauseTask", "ReceiveMachineInfos", "ReportAllSeenMachines", "LostProduct", "Successful", "Canceled", "ErrorCodeMidlevel" }, null, new[]{ typeof(global::LlsfMsgs.GripsMidlevelTasks.Types.CompType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.MoveToWaypoint), global::LlsfMsgs.MoveToWaypoint.Parser, new[]{ "Waypoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.GetFromStation), global::LlsfMsgs.GetFromStation.Parser, new[]{ "MachineId", "MachinePoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.DeliverToStation), global::LlsfMsgs.DeliverToStation.Parser, new[]{ "MachineId", "MachinePoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.BufferCapStation), global::LlsfMsgs.BufferCapStation.Parser, new[]{ "MachineId", "ShelfNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LlsfMsgs.ExploreMachine), global::LlsfMsgs.ExploreMachine.Parser, new[]{ "MachineId", "MachinePoint", "Waypoint" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GripsMidlevelTasks : pb::IMessage<GripsMidlevelTasks>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GripsMidlevelTasks> _parser = new pb::MessageParser<GripsMidlevelTasks>(() => new GripsMidlevelTasks());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GripsMidlevelTasks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.GripsMidlevelTasksReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GripsMidlevelTasks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GripsMidlevelTasks(GripsMidlevelTasks other) : this() {
      _hasBits0 = other._hasBits0;
      teamColor_ = other.teamColor_;
      taskId_ = other.taskId_;
      robotId_ = other.robotId_;
      moveToWaypoint_ = other.moveToWaypoint_ != null ? other.moveToWaypoint_.Clone() : null;
      getFromStation_ = other.getFromStation_ != null ? other.getFromStation_.Clone() : null;
      deliverToStation_ = other.deliverToStation_ != null ? other.deliverToStation_.Clone() : null;
      bufferCapStation_ = other.bufferCapStation_ != null ? other.bufferCapStation_.Clone() : null;
      exploreMachine_ = other.exploreMachine_ != null ? other.exploreMachine_.Clone() : null;
      cancelTask_ = other.cancelTask_;
      pauseTask_ = other.pauseTask_;
      receiveMachineInfos_ = other.receiveMachineInfos_;
      reportAllSeenMachines_ = other.reportAllSeenMachines_;
      lostProduct_ = other.lostProduct_;
      successful_ = other.successful_;
      canceled_ = other.canceled_;
      errorCodeMidlevel_ = other.errorCodeMidlevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GripsMidlevelTasks Clone() {
      return new GripsMidlevelTasks(this);
    }

    /// <summary>Field number for the "team_color" field.</summary>
    public const int TeamColorFieldNumber = 1;
    private readonly static global::LlsfMsgs.Team TeamColorDefaultValue = global::LlsfMsgs.Team.Cyan;

    private global::LlsfMsgs.Team teamColor_;
    /// <summary>
    /// general infos
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.Team TeamColor {
      get { if ((_hasBits0 & 1) != 0) { return teamColor_; } else { return TeamColorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        teamColor_ = value;
      }
    }
    /// <summary>Gets whether the "team_color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTeamColor {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "team_color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTeamColor() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private readonly static uint TaskIdDefaultValue = 0;

    private uint taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { if ((_hasBits0 & 2) != 0) { return taskId_; } else { return TaskIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        taskId_ = value;
      }
    }
    /// <summary>Gets whether the "task_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaskId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "task_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaskId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "robot_id" field.</summary>
    public const int RobotIdFieldNumber = 3;
    private readonly static uint RobotIdDefaultValue = 0;

    private uint robotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RobotId {
      get { if ((_hasBits0 & 4) != 0) { return robotId_; } else { return RobotIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        robotId_ = value;
      }
    }
    /// <summary>Gets whether the "robot_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRobotId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "robot_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRobotId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "move_to_waypoint" field.</summary>
    public const int MoveToWaypointFieldNumber = 5;
    private global::LlsfMsgs.MoveToWaypoint moveToWaypoint_;
    /// <summary>
    /// Tasks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.MoveToWaypoint MoveToWaypoint {
      get { return moveToWaypoint_; }
      set {
        moveToWaypoint_ = value;
      }
    }

    /// <summary>Field number for the "get_from_station" field.</summary>
    public const int GetFromStationFieldNumber = 6;
    private global::LlsfMsgs.GetFromStation getFromStation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.GetFromStation GetFromStation {
      get { return getFromStation_; }
      set {
        getFromStation_ = value;
      }
    }

    /// <summary>Field number for the "deliver_to_station" field.</summary>
    public const int DeliverToStationFieldNumber = 7;
    private global::LlsfMsgs.DeliverToStation deliverToStation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.DeliverToStation DeliverToStation {
      get { return deliverToStation_; }
      set {
        deliverToStation_ = value;
      }
    }

    /// <summary>Field number for the "buffer_cap_station" field.</summary>
    public const int BufferCapStationFieldNumber = 8;
    private global::LlsfMsgs.BufferCapStation bufferCapStation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.BufferCapStation BufferCapStation {
      get { return bufferCapStation_; }
      set {
        bufferCapStation_ = value;
      }
    }

    /// <summary>Field number for the "explore_machine" field.</summary>
    public const int ExploreMachineFieldNumber = 9;
    private global::LlsfMsgs.ExploreMachine exploreMachine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LlsfMsgs.ExploreMachine ExploreMachine {
      get { return exploreMachine_; }
      set {
        exploreMachine_ = value;
      }
    }

    /// <summary>Field number for the "cancel_task" field.</summary>
    public const int CancelTaskFieldNumber = 10;
    private readonly static bool CancelTaskDefaultValue = false;

    private bool cancelTask_;
    /// <summary>
    /// flags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CancelTask {
      get { if ((_hasBits0 & 8) != 0) { return cancelTask_; } else { return CancelTaskDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cancelTask_ = value;
      }
    }
    /// <summary>Gets whether the "cancel_task" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCancelTask {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cancel_task" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCancelTask() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pause_task" field.</summary>
    public const int PauseTaskFieldNumber = 11;
    private readonly static bool PauseTaskDefaultValue = false;

    private bool pauseTask_;
    /// <summary>
    /// if true current task is paused, if false again task is continued
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PauseTask {
      get { if ((_hasBits0 & 16) != 0) { return pauseTask_; } else { return PauseTaskDefaultValue; } }
      set {
        _hasBits0 |= 16;
        pauseTask_ = value;
      }
    }
    /// <summary>Gets whether the "pause_task" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPauseTask {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "pause_task" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPauseTask() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "receive_machine_infos" field.</summary>
    public const int ReceiveMachineInfosFieldNumber = 12;
    private readonly static bool ReceiveMachineInfosDefaultValue = false;

    private bool receiveMachineInfos_;
    /// <summary>
    /// true if robot requires machine-informations (can be set by robot and teamserver)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveMachineInfos {
      get { if ((_hasBits0 & 32) != 0) { return receiveMachineInfos_; } else { return ReceiveMachineInfosDefaultValue; } }
      set {
        _hasBits0 |= 32;
        receiveMachineInfos_ = value;
      }
    }
    /// <summary>Gets whether the "receive_machine_infos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReceiveMachineInfos {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "receive_machine_infos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReceiveMachineInfos() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "report_all_seen_machines" field.</summary>
    public const int ReportAllSeenMachinesFieldNumber = 13;
    private readonly static bool ReportAllSeenMachinesDefaultValue = false;

    private bool reportAllSeenMachines_;
    /// <summary>
    /// flag need for the exploration logic
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReportAllSeenMachines {
      get { if ((_hasBits0 & 64) != 0) { return reportAllSeenMachines_; } else { return ReportAllSeenMachinesDefaultValue; } }
      set {
        _hasBits0 |= 64;
        reportAllSeenMachines_ = value;
      }
    }
    /// <summary>Gets whether the "report_all_seen_machines" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportAllSeenMachines {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "report_all_seen_machines" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportAllSeenMachines() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "lost_product" field.</summary>
    public const int LostProductFieldNumber = 14;
    private readonly static bool LostProductDefaultValue = false;

    private bool lostProduct_;
    /// <summary>
    /// true if the product was lost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LostProduct {
      get { if ((_hasBits0 & 128) != 0) { return lostProduct_; } else { return LostProductDefaultValue; } }
      set {
        _hasBits0 |= 128;
        lostProduct_ = value;
      }
    }
    /// <summary>Gets whether the "lost_product" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLostProduct {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "lost_product" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLostProduct() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "successful" field.</summary>
    public const int SuccessfulFieldNumber = 15;
    private readonly static bool SuccessfulDefaultValue = false;

    private bool successful_;
    /// <summary>
    /// result of the execution from the robot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Successful {
      get { if ((_hasBits0 & 256) != 0) { return successful_; } else { return SuccessfulDefaultValue; } }
      set {
        _hasBits0 |= 256;
        successful_ = value;
      }
    }
    /// <summary>Gets whether the "successful" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuccessful {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "successful" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuccessful() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "canceled" field.</summary>
    public const int CanceledFieldNumber = 17;
    private readonly static bool CanceledDefaultValue = false;

    private bool canceled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Canceled {
      get { if ((_hasBits0 & 1024) != 0) { return canceled_; } else { return CanceledDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        canceled_ = value;
      }
    }
    /// <summary>Gets whether the "canceled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCanceled {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "canceled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCanceled() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "error_code_midlevel" field.</summary>
    public const int ErrorCodeMidlevelFieldNumber = 16;
    private readonly static uint ErrorCodeMidlevelDefaultValue = 0;

    private uint errorCodeMidlevel_;
    /// <summary>
    /// only set if failure, error-codes defined in GripsCommon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorCodeMidlevel {
      get { if ((_hasBits0 & 512) != 0) { return errorCodeMidlevel_; } else { return ErrorCodeMidlevelDefaultValue; } }
      set {
        _hasBits0 |= 512;
        errorCodeMidlevel_ = value;
      }
    }
    /// <summary>Gets whether the "error_code_midlevel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCodeMidlevel {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "error_code_midlevel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCodeMidlevel() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GripsMidlevelTasks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GripsMidlevelTasks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamColor != other.TeamColor) return false;
      if (TaskId != other.TaskId) return false;
      if (RobotId != other.RobotId) return false;
      if (!object.Equals(MoveToWaypoint, other.MoveToWaypoint)) return false;
      if (!object.Equals(GetFromStation, other.GetFromStation)) return false;
      if (!object.Equals(DeliverToStation, other.DeliverToStation)) return false;
      if (!object.Equals(BufferCapStation, other.BufferCapStation)) return false;
      if (!object.Equals(ExploreMachine, other.ExploreMachine)) return false;
      if (CancelTask != other.CancelTask) return false;
      if (PauseTask != other.PauseTask) return false;
      if (ReceiveMachineInfos != other.ReceiveMachineInfos) return false;
      if (ReportAllSeenMachines != other.ReportAllSeenMachines) return false;
      if (LostProduct != other.LostProduct) return false;
      if (Successful != other.Successful) return false;
      if (Canceled != other.Canceled) return false;
      if (ErrorCodeMidlevel != other.ErrorCodeMidlevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTeamColor) hash ^= TeamColor.GetHashCode();
      if (HasTaskId) hash ^= TaskId.GetHashCode();
      if (HasRobotId) hash ^= RobotId.GetHashCode();
      if (moveToWaypoint_ != null) hash ^= MoveToWaypoint.GetHashCode();
      if (getFromStation_ != null) hash ^= GetFromStation.GetHashCode();
      if (deliverToStation_ != null) hash ^= DeliverToStation.GetHashCode();
      if (bufferCapStation_ != null) hash ^= BufferCapStation.GetHashCode();
      if (exploreMachine_ != null) hash ^= ExploreMachine.GetHashCode();
      if (HasCancelTask) hash ^= CancelTask.GetHashCode();
      if (HasPauseTask) hash ^= PauseTask.GetHashCode();
      if (HasReceiveMachineInfos) hash ^= ReceiveMachineInfos.GetHashCode();
      if (HasReportAllSeenMachines) hash ^= ReportAllSeenMachines.GetHashCode();
      if (HasLostProduct) hash ^= LostProduct.GetHashCode();
      if (HasSuccessful) hash ^= Successful.GetHashCode();
      if (HasCanceled) hash ^= Canceled.GetHashCode();
      if (HasErrorCodeMidlevel) hash ^= ErrorCodeMidlevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTeamColor) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TeamColor);
      }
      if (HasTaskId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (HasRobotId) {
        output.WriteRawTag(24);
        output.WriteUInt32(RobotId);
      }
      if (moveToWaypoint_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MoveToWaypoint);
      }
      if (getFromStation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(GetFromStation);
      }
      if (deliverToStation_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DeliverToStation);
      }
      if (bufferCapStation_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BufferCapStation);
      }
      if (exploreMachine_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ExploreMachine);
      }
      if (HasCancelTask) {
        output.WriteRawTag(80);
        output.WriteBool(CancelTask);
      }
      if (HasPauseTask) {
        output.WriteRawTag(88);
        output.WriteBool(PauseTask);
      }
      if (HasReceiveMachineInfos) {
        output.WriteRawTag(96);
        output.WriteBool(ReceiveMachineInfos);
      }
      if (HasReportAllSeenMachines) {
        output.WriteRawTag(104);
        output.WriteBool(ReportAllSeenMachines);
      }
      if (HasLostProduct) {
        output.WriteRawTag(112);
        output.WriteBool(LostProduct);
      }
      if (HasSuccessful) {
        output.WriteRawTag(120);
        output.WriteBool(Successful);
      }
      if (HasErrorCodeMidlevel) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(ErrorCodeMidlevel);
      }
      if (HasCanceled) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Canceled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTeamColor) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TeamColor);
      }
      if (HasTaskId) {
        output.WriteRawTag(16);
        output.WriteUInt32(TaskId);
      }
      if (HasRobotId) {
        output.WriteRawTag(24);
        output.WriteUInt32(RobotId);
      }
      if (moveToWaypoint_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MoveToWaypoint);
      }
      if (getFromStation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(GetFromStation);
      }
      if (deliverToStation_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DeliverToStation);
      }
      if (bufferCapStation_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BufferCapStation);
      }
      if (exploreMachine_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ExploreMachine);
      }
      if (HasCancelTask) {
        output.WriteRawTag(80);
        output.WriteBool(CancelTask);
      }
      if (HasPauseTask) {
        output.WriteRawTag(88);
        output.WriteBool(PauseTask);
      }
      if (HasReceiveMachineInfos) {
        output.WriteRawTag(96);
        output.WriteBool(ReceiveMachineInfos);
      }
      if (HasReportAllSeenMachines) {
        output.WriteRawTag(104);
        output.WriteBool(ReportAllSeenMachines);
      }
      if (HasLostProduct) {
        output.WriteRawTag(112);
        output.WriteBool(LostProduct);
      }
      if (HasSuccessful) {
        output.WriteRawTag(120);
        output.WriteBool(Successful);
      }
      if (HasErrorCodeMidlevel) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(ErrorCodeMidlevel);
      }
      if (HasCanceled) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Canceled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTeamColor) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TeamColor);
      }
      if (HasTaskId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (HasRobotId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RobotId);
      }
      if (moveToWaypoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveToWaypoint);
      }
      if (getFromStation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetFromStation);
      }
      if (deliverToStation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeliverToStation);
      }
      if (bufferCapStation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BufferCapStation);
      }
      if (exploreMachine_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExploreMachine);
      }
      if (HasCancelTask) {
        size += 1 + 1;
      }
      if (HasPauseTask) {
        size += 1 + 1;
      }
      if (HasReceiveMachineInfos) {
        size += 1 + 1;
      }
      if (HasReportAllSeenMachines) {
        size += 1 + 1;
      }
      if (HasLostProduct) {
        size += 1 + 1;
      }
      if (HasSuccessful) {
        size += 1 + 1;
      }
      if (HasCanceled) {
        size += 2 + 1;
      }
      if (HasErrorCodeMidlevel) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCodeMidlevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GripsMidlevelTasks other) {
      if (other == null) {
        return;
      }
      if (other.HasTeamColor) {
        TeamColor = other.TeamColor;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasRobotId) {
        RobotId = other.RobotId;
      }
      if (other.moveToWaypoint_ != null) {
        if (moveToWaypoint_ == null) {
          MoveToWaypoint = new global::LlsfMsgs.MoveToWaypoint();
        }
        MoveToWaypoint.MergeFrom(other.MoveToWaypoint);
      }
      if (other.getFromStation_ != null) {
        if (getFromStation_ == null) {
          GetFromStation = new global::LlsfMsgs.GetFromStation();
        }
        GetFromStation.MergeFrom(other.GetFromStation);
      }
      if (other.deliverToStation_ != null) {
        if (deliverToStation_ == null) {
          DeliverToStation = new global::LlsfMsgs.DeliverToStation();
        }
        DeliverToStation.MergeFrom(other.DeliverToStation);
      }
      if (other.bufferCapStation_ != null) {
        if (bufferCapStation_ == null) {
          BufferCapStation = new global::LlsfMsgs.BufferCapStation();
        }
        BufferCapStation.MergeFrom(other.BufferCapStation);
      }
      if (other.exploreMachine_ != null) {
        if (exploreMachine_ == null) {
          ExploreMachine = new global::LlsfMsgs.ExploreMachine();
        }
        ExploreMachine.MergeFrom(other.ExploreMachine);
      }
      if (other.HasCancelTask) {
        CancelTask = other.CancelTask;
      }
      if (other.HasPauseTask) {
        PauseTask = other.PauseTask;
      }
      if (other.HasReceiveMachineInfos) {
        ReceiveMachineInfos = other.ReceiveMachineInfos;
      }
      if (other.HasReportAllSeenMachines) {
        ReportAllSeenMachines = other.ReportAllSeenMachines;
      }
      if (other.HasLostProduct) {
        LostProduct = other.LostProduct;
      }
      if (other.HasSuccessful) {
        Successful = other.Successful;
      }
      if (other.HasCanceled) {
        Canceled = other.Canceled;
      }
      if (other.HasErrorCodeMidlevel) {
        ErrorCodeMidlevel = other.ErrorCodeMidlevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            RobotId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (moveToWaypoint_ == null) {
              MoveToWaypoint = new global::LlsfMsgs.MoveToWaypoint();
            }
            input.ReadMessage(MoveToWaypoint);
            break;
          }
          case 50: {
            if (getFromStation_ == null) {
              GetFromStation = new global::LlsfMsgs.GetFromStation();
            }
            input.ReadMessage(GetFromStation);
            break;
          }
          case 58: {
            if (deliverToStation_ == null) {
              DeliverToStation = new global::LlsfMsgs.DeliverToStation();
            }
            input.ReadMessage(DeliverToStation);
            break;
          }
          case 66: {
            if (bufferCapStation_ == null) {
              BufferCapStation = new global::LlsfMsgs.BufferCapStation();
            }
            input.ReadMessage(BufferCapStation);
            break;
          }
          case 74: {
            if (exploreMachine_ == null) {
              ExploreMachine = new global::LlsfMsgs.ExploreMachine();
            }
            input.ReadMessage(ExploreMachine);
            break;
          }
          case 80: {
            CancelTask = input.ReadBool();
            break;
          }
          case 88: {
            PauseTask = input.ReadBool();
            break;
          }
          case 96: {
            ReceiveMachineInfos = input.ReadBool();
            break;
          }
          case 104: {
            ReportAllSeenMachines = input.ReadBool();
            break;
          }
          case 112: {
            LostProduct = input.ReadBool();
            break;
          }
          case 120: {
            Successful = input.ReadBool();
            break;
          }
          case 128: {
            ErrorCodeMidlevel = input.ReadUInt32();
            break;
          }
          case 136: {
            Canceled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TeamColor = (global::LlsfMsgs.Team) input.ReadEnum();
            break;
          }
          case 16: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 24: {
            RobotId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (moveToWaypoint_ == null) {
              MoveToWaypoint = new global::LlsfMsgs.MoveToWaypoint();
            }
            input.ReadMessage(MoveToWaypoint);
            break;
          }
          case 50: {
            if (getFromStation_ == null) {
              GetFromStation = new global::LlsfMsgs.GetFromStation();
            }
            input.ReadMessage(GetFromStation);
            break;
          }
          case 58: {
            if (deliverToStation_ == null) {
              DeliverToStation = new global::LlsfMsgs.DeliverToStation();
            }
            input.ReadMessage(DeliverToStation);
            break;
          }
          case 66: {
            if (bufferCapStation_ == null) {
              BufferCapStation = new global::LlsfMsgs.BufferCapStation();
            }
            input.ReadMessage(BufferCapStation);
            break;
          }
          case 74: {
            if (exploreMachine_ == null) {
              ExploreMachine = new global::LlsfMsgs.ExploreMachine();
            }
            input.ReadMessage(ExploreMachine);
            break;
          }
          case 80: {
            CancelTask = input.ReadBool();
            break;
          }
          case 88: {
            PauseTask = input.ReadBool();
            break;
          }
          case 96: {
            ReceiveMachineInfos = input.ReadBool();
            break;
          }
          case 104: {
            ReportAllSeenMachines = input.ReadBool();
            break;
          }
          case 112: {
            LostProduct = input.ReadBool();
            break;
          }
          case 120: {
            Successful = input.ReadBool();
            break;
          }
          case 128: {
            ErrorCodeMidlevel = input.ReadUInt32();
            break;
          }
          case 136: {
            Canceled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GripsMidlevelTasks message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("COMP_ID")] CompId = 5000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 502,
      }

    }
    #endregion

  }

  /// <summary>
  /// Move robot to stated waypoint
  /// </summary>
  public sealed partial class MoveToWaypoint : pb::IMessage<MoveToWaypoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveToWaypoint> _parser = new pb::MessageParser<MoveToWaypoint>(() => new MoveToWaypoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveToWaypoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.GripsMidlevelTasksReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToWaypoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToWaypoint(MoveToWaypoint other) : this() {
      waypoint_ = other.waypoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToWaypoint Clone() {
      return new MoveToWaypoint(this);
    }

    /// <summary>Field number for the "waypoint" field.</summary>
    public const int WaypointFieldNumber = 1;
    private readonly static string WaypointDefaultValue = "";

    private string waypoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Waypoint {
      get { return waypoint_ ?? WaypointDefaultValue; }
      set {
        waypoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "waypoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWaypoint {
      get { return waypoint_ != null; }
    }
    /// <summary>Clears the value of the "waypoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWaypoint() {
      waypoint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveToWaypoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveToWaypoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Waypoint != other.Waypoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWaypoint) hash ^= Waypoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWaypoint) {
        output.WriteRawTag(10);
        output.WriteString(Waypoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWaypoint) {
        output.WriteRawTag(10);
        output.WriteString(Waypoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasWaypoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Waypoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveToWaypoint other) {
      if (other == null) {
        return;
      }
      if (other.HasWaypoint) {
        Waypoint = other.Waypoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Waypoint = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Waypoint = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Get a workpiece at the given station and hold the product in the gripper
  /// </summary>
  public sealed partial class GetFromStation : pb::IMessage<GetFromStation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFromStation> _parser = new pb::MessageParser<GetFromStation>(() => new GetFromStation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFromStation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.GripsMidlevelTasksReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFromStation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFromStation(GetFromStation other) : this() {
      machineId_ = other.machineId_;
      machinePoint_ = other.machinePoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFromStation Clone() {
      return new GetFromStation(this);
    }

    /// <summary>Field number for the "machine_id" field.</summary>
    public const int MachineIdFieldNumber = 1;
    private readonly static string MachineIdDefaultValue = "";

    private string machineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineId {
      get { return machineId_ ?? MachineIdDefaultValue; }
      set {
        machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachineId {
      get { return machineId_ != null; }
    }
    /// <summary>Clears the value of the "machine_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachineId() {
      machineId_ = null;
    }

    /// <summary>Field number for the "machine_point" field.</summary>
    public const int MachinePointFieldNumber = 2;
    private readonly static string MachinePointDefaultValue = "";

    private string machinePoint_;
    /// <summary>
    /// valid machine-points: input, output
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachinePoint {
      get { return machinePoint_ ?? MachinePointDefaultValue; }
      set {
        machinePoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachinePoint {
      get { return machinePoint_ != null; }
    }
    /// <summary>Clears the value of the "machine_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachinePoint() {
      machinePoint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFromStation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFromStation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineId != other.MachineId) return false;
      if (MachinePoint != other.MachinePoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMachineId) hash ^= MachineId.GetHashCode();
      if (HasMachinePoint) hash ^= MachinePoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasMachinePoint) {
        output.WriteRawTag(18);
        output.WriteString(MachinePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasMachinePoint) {
        output.WriteRawTag(18);
        output.WriteString(MachinePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMachineId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
      }
      if (HasMachinePoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachinePoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFromStation other) {
      if (other == null) {
        return;
      }
      if (other.HasMachineId) {
        MachineId = other.MachineId;
      }
      if (other.HasMachinePoint) {
        MachinePoint = other.MachinePoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 18: {
            MachinePoint = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 18: {
            MachinePoint = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Deliver the holding product to the given station
  /// </summary>
  public sealed partial class DeliverToStation : pb::IMessage<DeliverToStation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeliverToStation> _parser = new pb::MessageParser<DeliverToStation>(() => new DeliverToStation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeliverToStation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.GripsMidlevelTasksReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliverToStation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliverToStation(DeliverToStation other) : this() {
      machineId_ = other.machineId_;
      machinePoint_ = other.machinePoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliverToStation Clone() {
      return new DeliverToStation(this);
    }

    /// <summary>Field number for the "machine_id" field.</summary>
    public const int MachineIdFieldNumber = 1;
    private readonly static string MachineIdDefaultValue = "";

    private string machineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineId {
      get { return machineId_ ?? MachineIdDefaultValue; }
      set {
        machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachineId {
      get { return machineId_ != null; }
    }
    /// <summary>Clears the value of the "machine_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachineId() {
      machineId_ = null;
    }

    /// <summary>Field number for the "machine_point" field.</summary>
    public const int MachinePointFieldNumber = 2;
    private readonly static string MachinePointDefaultValue = "";

    private string machinePoint_;
    /// <summary>
    /// valid machine-points: input, slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachinePoint {
      get { return machinePoint_ ?? MachinePointDefaultValue; }
      set {
        machinePoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachinePoint {
      get { return machinePoint_ != null; }
    }
    /// <summary>Clears the value of the "machine_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachinePoint() {
      machinePoint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeliverToStation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeliverToStation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineId != other.MachineId) return false;
      if (MachinePoint != other.MachinePoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMachineId) hash ^= MachineId.GetHashCode();
      if (HasMachinePoint) hash ^= MachinePoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasMachinePoint) {
        output.WriteRawTag(18);
        output.WriteString(MachinePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasMachinePoint) {
        output.WriteRawTag(18);
        output.WriteString(MachinePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMachineId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
      }
      if (HasMachinePoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachinePoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeliverToStation other) {
      if (other == null) {
        return;
      }
      if (other.HasMachineId) {
        MachineId = other.MachineId;
      }
      if (other.HasMachinePoint) {
        MachinePoint = other.MachinePoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 18: {
            MachinePoint = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 18: {
            MachinePoint = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Get product from shelf and place it immediately afterwards on the conveyor
  /// </summary>
  public sealed partial class BufferCapStation : pb::IMessage<BufferCapStation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BufferCapStation> _parser = new pb::MessageParser<BufferCapStation>(() => new BufferCapStation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferCapStation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.GripsMidlevelTasksReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferCapStation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferCapStation(BufferCapStation other) : this() {
      _hasBits0 = other._hasBits0;
      machineId_ = other.machineId_;
      shelfNumber_ = other.shelfNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferCapStation Clone() {
      return new BufferCapStation(this);
    }

    /// <summary>Field number for the "machine_id" field.</summary>
    public const int MachineIdFieldNumber = 1;
    private readonly static string MachineIdDefaultValue = "";

    private string machineId_;
    /// <summary>
    /// machine-id because need to know if CS1 or CS2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineId {
      get { return machineId_ ?? MachineIdDefaultValue; }
      set {
        machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachineId {
      get { return machineId_ != null; }
    }
    /// <summary>Clears the value of the "machine_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachineId() {
      machineId_ = null;
    }

    /// <summary>Field number for the "shelf_number" field.</summary>
    public const int ShelfNumberFieldNumber = 2;
    private readonly static uint ShelfNumberDefaultValue = 0;

    private uint shelfNumber_;
    /// <summary>
    /// only for old-gripper, valid shelf-numbers: 1, 2, 3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShelfNumber {
      get { if ((_hasBits0 & 1) != 0) { return shelfNumber_; } else { return ShelfNumberDefaultValue; } }
      set {
        _hasBits0 |= 1;
        shelfNumber_ = value;
      }
    }
    /// <summary>Gets whether the "shelf_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasShelfNumber {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "shelf_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShelfNumber() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferCapStation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferCapStation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineId != other.MachineId) return false;
      if (ShelfNumber != other.ShelfNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMachineId) hash ^= MachineId.GetHashCode();
      if (HasShelfNumber) hash ^= ShelfNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasShelfNumber) {
        output.WriteRawTag(16);
        output.WriteUInt32(ShelfNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasShelfNumber) {
        output.WriteRawTag(16);
        output.WriteUInt32(ShelfNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMachineId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
      }
      if (HasShelfNumber) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShelfNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferCapStation other) {
      if (other == null) {
        return;
      }
      if (other.HasMachineId) {
        MachineId = other.MachineId;
      }
      if (other.HasShelfNumber) {
        ShelfNumber = other.ShelfNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 16: {
            ShelfNumber = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 16: {
            ShelfNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Move to the given machine (if position already detected), else move to given waypoint (=zone on the playing field)
  /// </summary>
  public sealed partial class ExploreMachine : pb::IMessage<ExploreMachine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExploreMachine> _parser = new pb::MessageParser<ExploreMachine>(() => new ExploreMachine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExploreMachine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LlsfMsgs.GripsMidlevelTasksReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreMachine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreMachine(ExploreMachine other) : this() {
      machineId_ = other.machineId_;
      machinePoint_ = other.machinePoint_;
      waypoint_ = other.waypoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExploreMachine Clone() {
      return new ExploreMachine(this);
    }

    /// <summary>Field number for the "machine_id" field.</summary>
    public const int MachineIdFieldNumber = 1;
    private readonly static string MachineIdDefaultValue = "";

    private string machineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineId {
      get { return machineId_ ?? MachineIdDefaultValue; }
      set {
        machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachineId {
      get { return machineId_ != null; }
    }
    /// <summary>Clears the value of the "machine_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachineId() {
      machineId_ = null;
    }

    /// <summary>Field number for the "machine_point" field.</summary>
    public const int MachinePointFieldNumber = 2;
    private readonly static string MachinePointDefaultValue = "";

    private string machinePoint_;
    /// <summary>
    /// valid machine-points: input, output
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachinePoint {
      get { return machinePoint_ ?? MachinePointDefaultValue; }
      set {
        machinePoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "machine_point" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMachinePoint {
      get { return machinePoint_ != null; }
    }
    /// <summary>Clears the value of the "machine_point" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMachinePoint() {
      machinePoint_ = null;
    }

    /// <summary>Field number for the "waypoint" field.</summary>
    public const int WaypointFieldNumber = 3;
    private readonly static string WaypointDefaultValue = "";

    private string waypoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Waypoint {
      get { return waypoint_ ?? WaypointDefaultValue; }
      set {
        waypoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "waypoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWaypoint {
      get { return waypoint_ != null; }
    }
    /// <summary>Clears the value of the "waypoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWaypoint() {
      waypoint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExploreMachine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExploreMachine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineId != other.MachineId) return false;
      if (MachinePoint != other.MachinePoint) return false;
      if (Waypoint != other.Waypoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMachineId) hash ^= MachineId.GetHashCode();
      if (HasMachinePoint) hash ^= MachinePoint.GetHashCode();
      if (HasWaypoint) hash ^= Waypoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasMachinePoint) {
        output.WriteRawTag(18);
        output.WriteString(MachinePoint);
      }
      if (HasWaypoint) {
        output.WriteRawTag(26);
        output.WriteString(Waypoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMachineId) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (HasMachinePoint) {
        output.WriteRawTag(18);
        output.WriteString(MachinePoint);
      }
      if (HasWaypoint) {
        output.WriteRawTag(26);
        output.WriteString(Waypoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMachineId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
      }
      if (HasMachinePoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachinePoint);
      }
      if (HasWaypoint) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Waypoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExploreMachine other) {
      if (other == null) {
        return;
      }
      if (other.HasMachineId) {
        MachineId = other.MachineId;
      }
      if (other.HasMachinePoint) {
        MachinePoint = other.MachinePoint;
      }
      if (other.HasWaypoint) {
        Waypoint = other.Waypoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 18: {
            MachinePoint = input.ReadString();
            break;
          }
          case 26: {
            Waypoint = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 18: {
            MachinePoint = input.ReadString();
            break;
          }
          case 26: {
            Waypoint = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
